/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import useSwr,{
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ErrorResponseResponse,
  ListTargetGroupResourceResponse,
  ResourceFilter,
  ListTargetGroupRoutesResponse,
  ListEntitlementsResponseResponse,
  ListTargetsResponseResponse,
  UserListEntitlementTargetsParams,
  Preflight,
  CreatePreflightRequestBody,
  ListRequestsResponseResponse,
  UserListReviewsParams,
  UserListRequestsParams,
  Request,
  CreateAccessRequestRequestBody,
  AccessInstructionsResponseResponse
} from '.././types'
import { customInstance, ErrorType } from '../../custom-instance'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


// eslint-disable-next-line @typescript-eslint/no-explicit-any
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Delete Access Rule
 */
export const adminDeleteAccessRule = (
    ruleId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/admin/access-rules/${ruleId}`, method: 'delete'
    },
      options);
    }
  

/**
 * List the filtered resources associated with the provided resourceType for given target-group-id.
 * @summary Filter TargetGroup Resources
 */
export const adminFilterTargetGroupResources = (
    id: string,
    resourceType: string,
    resourceFilter: ResourceFilter,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupResourceResponse>(
      {url: `/api/v1/admin/target-groups/${id}/resources/${resourceType}/filters`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: resourceFilter
    },
      options);
    }
  

/**
 * Lists all routes for a given Target Group
 */
export const adminListTargetRoutes = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupRoutesResponse>(
      {url: `/api/v1/admin/target-groups/${id}/routes`, method: 'get'
    },
      options);
    }
  

export const getAdminListTargetRoutesKey = (id: string,) => [`/api/v1/admin/target-groups/${id}/routes`];

    
export type AdminListTargetRoutesQueryResult = NonNullable<AsyncReturnType<typeof adminListTargetRoutes>>
export type AdminListTargetRoutesQueryError = ErrorType<ErrorResponseResponse>

export const useAdminListTargetRoutes = <TError = ErrorType<ErrorResponseResponse>>(
 id: string, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof adminListTargetRoutes>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const isEnable = !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getAdminListTargetRoutesKey(id) : null);
  const swrFn = () => adminListTargetRoutes(id, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all entitlement kinds configured in Common Fate.
These are derived from the Target Groups.
 * @summary List Entitlements
 */
export const userListEntitlements = (
    
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListEntitlementsResponseResponse>(
      {url: `/api/v1/entitlements`, method: 'get'
    },
      options);
    }
  

export const getUserListEntitlementsKey = () => [`/api/v1/entitlements`];

    
export type UserListEntitlementsQueryResult = NonNullable<AsyncReturnType<typeof userListEntitlements>>
export type UserListEntitlementsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListEntitlements = <TError = ErrorType<ErrorResponseResponse>>(
  options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userListEntitlements>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getUserListEntitlementsKey())
  const swrFn = () => userListEntitlements(requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all targets that the user has access to
 * @summary List Entitlement Resources
 */
export const userListEntitlementTargets = (
    params?: UserListEntitlementTargetsParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetsResponseResponse>(
      {url: `/api/v1/entitlements/targets`, method: 'get',
        params,
    },
      options);
    }
  

export const getUserListEntitlementTargetsKey = (params?: UserListEntitlementTargetsParams,) => [`/api/v1/entitlements/targets`, ...(params ? [params]: [])];

    
export type UserListEntitlementTargetsQueryResult = NonNullable<AsyncReturnType<typeof userListEntitlementTargets>>
export type UserListEntitlementTargetsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListEntitlementTargets = <TError = ErrorType<ErrorResponseResponse>>(
 params?: UserListEntitlementTargetsParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userListEntitlementTargets>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getUserListEntitlementTargetsKey(params))
  const swrFn = () => userListEntitlementTargets(params, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Get Preflight
 */
export const userGetPreflight = (
    preflightId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Preflight>(
      {url: `/api/v1/preflight/${preflightId}`, method: 'get'
    },
      options);
    }
  

export const getUserGetPreflightKey = (preflightId: string,) => [`/api/v1/preflight/${preflightId}`];

    
export type UserGetPreflightQueryResult = NonNullable<AsyncReturnType<typeof userGetPreflight>>
export type UserGetPreflightQueryError = ErrorType<ErrorResponseResponse>

export const useUserGetPreflight = <TError = ErrorType<ErrorResponseResponse>>(
 preflightId: string, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userGetPreflight>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const isEnable = !!(preflightId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getUserGetPreflightKey(preflightId) : null);
  const swrFn = () => userGetPreflight(preflightId, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Verify and validate a collection of request items
 * @summary Submit Preflight
 */
export const userRequestPreflight = (
    createPreflightRequestBody: CreatePreflightRequestBody,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Preflight>(
      {url: `/api/v1/preflight`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: createPreflightRequestBody
    },
      options);
    }
  

/**
 * Lists requests where the user is a reviewer
 * @summary List Reviews
 */
export const userListReviews = (
    params?: UserListReviewsParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListRequestsResponseResponse>(
      {url: `/api/v1/reviews`, method: 'get',
        params,
    },
      options);
    }
  

export const getUserListReviewsKey = (params?: UserListReviewsParams,) => [`/api/v1/reviews`, ...(params ? [params]: [])];

    
export type UserListReviewsQueryResult = NonNullable<AsyncReturnType<typeof userListReviews>>
export type UserListReviewsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListReviews = <TError = ErrorType<ErrorResponseResponse>>(
 params?: UserListReviewsParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userListReviews>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getUserListReviewsKey(params))
  const swrFn = () => userListReviews(params, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Lists a users own requests
 * @summary List Requests
 */
export const userListRequests = (
    params?: UserListRequestsParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListRequestsResponseResponse>(
      {url: `/api/v1/requests`, method: 'get',
        params,
    },
      options);
    }
  

export const getUserListRequestsKey = (params?: UserListRequestsParams,) => [`/api/v1/requests`, ...(params ? [params]: [])];

    
export type UserListRequestsQueryResult = NonNullable<AsyncReturnType<typeof userListRequests>>
export type UserListRequestsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListRequests = <TError = ErrorType<ErrorResponseResponse>>(
 params?: UserListRequestsParams, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userListRequests>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const swrKey = swrOptions?.swrKey ?? (() => getUserListRequestsKey(params))
  const swrFn = () => userListRequests(params, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Initiates the granting process for a group of requests
 */
export const userPostRequests = (
    createAccessRequestRequestBody: CreateAccessRequestRequestBody,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Request>(
      {url: `/api/v1/requests`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: createAccessRequestRequestBody
    },
      options);
    }
  

/**
 * Gets information for a request
 * @summary Get Request
 */
export const userGetRequest = (
    requestId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Request>(
      {url: `/api/v1/requests/${requestId}`, method: 'get'
    },
      options);
    }
  

export const getUserGetRequestKey = (requestId: string,) => [`/api/v1/requests/${requestId}`];

    
export type UserGetRequestQueryResult = NonNullable<AsyncReturnType<typeof userGetRequest>>
export type UserGetRequestQueryError = ErrorType<ErrorResponseResponse>

export const useUserGetRequest = <TError = ErrorType<ErrorResponseResponse>>(
 requestId: string, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof userGetRequest>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const isEnable = !!(requestId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getUserGetRequestKey(requestId) : null);
  const swrFn = () => userGetRequest(requestId, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Your GET endpoint
 */
export const getGroupTargetInstructions = (
    targetId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<AccessInstructionsResponseResponse>(
      {url: `/api/v1/targets/${targetId}/access-instructions`, method: 'get'
    },
      options);
    }
  

export const getGetGroupTargetInstructionsKey = (targetId: string,) => [`/api/v1/targets/${targetId}/access-instructions`];

    
export type GetGroupTargetInstructionsQueryResult = NonNullable<AsyncReturnType<typeof getGroupTargetInstructions>>
export type GetGroupTargetInstructionsQueryError = ErrorType<ErrorResponseResponse>

export const useGetGroupTargetInstructions = <TError = ErrorType<ErrorResponseResponse>>(
 targetId: string, options?: { swr?:SWRConfiguration<AsyncReturnType<typeof getGroupTargetInstructions>, TError> & {swrKey: Key}, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options || {}

  const isEnable = !!(targetId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnable ? getGetGroupTargetInstructionsKey(targetId) : null);
  const swrFn = () => getGroupTargetInstructions(targetId, requestOptions);

  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

