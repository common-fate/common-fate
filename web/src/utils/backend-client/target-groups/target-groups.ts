/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ListTargetGroupDeploymentsResponseResponse,
  TargetGroup,
  ListTargetGroupsResponseResponse,
  CreateTargetGroupRequestBody
} from '.././types'
import { customInstance } from '../../custom-instance'
import type { ErrorType } from '../../custom-instance'


  
  // eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Your GET endpoint
 */
export const getTargetGroupDeployment = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/target-group-deployments/${id}`, method: 'get'
    },
      options);
    }
  

export const getGetTargetGroupDeploymentKey = (id: string,) => [`/api/v1/target-group-deployments/${id}`];

    
export type GetTargetGroupDeploymentQueryResult = NonNullable<Awaited<ReturnType<typeof getTargetGroupDeployment>>>
export type GetTargetGroupDeploymentQueryError = ErrorType<unknown>

export const useGetTargetGroupDeployment = <TError = ErrorType<unknown>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTargetGroupDeployment>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTargetGroupDeploymentKey(id) : null);
  const swrFn = () => getTargetGroupDeployment(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Your GET endpoint
 */
export const listTargetGroupDeployments = (
    
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupDeploymentsResponseResponse>(
      {url: `/api/v1/target-group-deployments`, method: 'get'
    },
      options);
    }
  

export const getListTargetGroupDeploymentsKey = () => [`/api/v1/target-group-deployments`];

    
export type ListTargetGroupDeploymentsQueryResult = NonNullable<Awaited<ReturnType<typeof listTargetGroupDeployments>>>
export type ListTargetGroupDeploymentsQueryError = ErrorType<void>

export const useListTargetGroupDeployments = <TError = ErrorType<void>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listTargetGroupDeployments>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListTargetGroupDeploymentsKey() : null);
  const swrFn = () => listTargetGroupDeployments(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create a target group deployment
 */
export const createTargetGroupDeployment = (
    
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/target-group-deployments`, method: 'post'
    },
      options);
    }
  

/**
 * @summary Your GET endpoint
 */
export const getTargetGroup = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<TargetGroup>(
      {url: `/api/v1/target-groups/${id}`, method: 'get'
    },
      options);
    }
  

export const getGetTargetGroupKey = (id: string,) => [`/api/v1/target-groups/${id}`];

    
export type GetTargetGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getTargetGroup>>>
export type GetTargetGroupQueryError = ErrorType<unknown>

export const useGetTargetGroup = <TError = ErrorType<unknown>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTargetGroup>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTargetGroupKey(id) : null);
  const swrFn = () => getTargetGroup(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Your GET endpoint
 */
export const listTargetGroups = (
    
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupsResponseResponse>(
      {url: `/api/v1/target-groups`, method: 'get'
    },
      options);
    }
  

export const getListTargetGroupsKey = () => [`/api/v1/target-groups`];

    
export type ListTargetGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof listTargetGroups>>>
export type ListTargetGroupsQueryError = ErrorType<void>

export const useListTargetGroups = <TError = ErrorType<void>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof listTargetGroups>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getListTargetGroupsKey() : null);
  const swrFn = () => listTargetGroups(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export const createTargetGroup = (
    createTargetGroupRequestBody: CreateTargetGroupRequestBody,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/target-groups`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTargetGroupRequestBody
    },
      options);
    }
  

export const createTargetGroupLink = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/target-groups/${id}/link`, method: 'post'
    },
      options);
    }
  

