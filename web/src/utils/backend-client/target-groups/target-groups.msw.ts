/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getListTargetGroupDeploymentsMock = () => ({id: faker.helpers.arrayElement([faker.random.word(), undefined])})

export const getGetTargetGroupMock = () => ({id: faker.helpers.arrayElement([faker.random.word(), undefined]), targetSchema: faker.helpers.arrayElement([{}, undefined]), icon: faker.helpers.arrayElement([faker.random.word(), undefined]), targetDeployments: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), undefined])})

export const getListTargetGroupsMock = () => ({res: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.random.word(), undefined]), targetSchema: faker.helpers.arrayElement([{}, undefined]), icon: faker.helpers.arrayElement([faker.random.word(), undefined]), targetDeployments: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({})), undefined])}, undefined]), next: faker.helpers.arrayElement([faker.random.word(), undefined])})

export const getTargetGroupsMSW = () => [
rest.get('*/api/v1/target-group-deployments/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/v1/target-group-deployments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getListTargetGroupDeploymentsMock()),
        )
      }),rest.post('*/api/v1/target-group-deployments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/v1/target-groups/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetTargetGroupMock()),
        )
      }),rest.get('*/api/v1/target-groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getListTargetGroupsMock()),
        )
      }),rest.post('*/api/v1/target-groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/v1/target-groups/:id/link', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
