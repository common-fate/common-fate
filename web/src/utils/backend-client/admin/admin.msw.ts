/**
 * Generated by orval v6.7.1 🍺
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'
import {
  ResourceFilterOperationTypeEnum,
  RequestStatus,
  RequestAccessGroupStatus,
  RequestAccessGroupApprovalMethod,
  RequestAccessGroupTargetStatus,
  IdpStatus,
  LogLevel
} from '.././types'

export const getAdminGetDeploymentVersionMock = () => ({version: faker.random.word()})

export const getAdminListAccessRulesMock = () => ({accessRules: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), name: faker.random.word(), description: faker.random.word(), targets: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({targetGroup: {id: faker.random.word(), schema: {
        'clhr9yvi90000jis78knzhoyb': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])}, fieldFilterExpessions: {
        'clhr9yvi90001jis7a9f72qcr': [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, undefined])}, undefined])}))
      }})), timeConstraints: {maxDurationSeconds: faker.datatype.number()}, groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), approval: {users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), groups: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, metadata: {createdAt: faker.random.word(), createdBy: faker.random.word(), updatedAt: faker.random.word(), updatedBy: faker.random.word(), updateMessage: faker.helpers.randomize([faker.random.word(), undefined])}, priority: faker.datatype.number()})), next: faker.helpers.randomize([faker.random.word(), null])})

export const getAdminCreateAccessRuleMock = () => ({id: faker.random.word(), name: faker.random.word(), description: faker.random.word(), targets: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({targetGroup: {id: faker.random.word(), schema: {
        'clhr9yvig0002jis7gw749vj3': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])}, fieldFilterExpessions: {
        'clhr9yvig0003jis70njy17iz': [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, undefined])}, undefined])}))
      }})), timeConstraints: {maxDurationSeconds: faker.datatype.number()}, groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), approval: {users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), groups: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, metadata: {createdAt: faker.random.word(), createdBy: faker.random.word(), updatedAt: faker.random.word(), updatedBy: faker.random.word(), updateMessage: faker.helpers.randomize([faker.random.word(), undefined])}, priority: faker.datatype.number()})

export const getAdminGetAccessRuleMock = () => ({id: faker.random.word(), name: faker.random.word(), description: faker.random.word(), targets: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({targetGroup: {id: faker.random.word(), schema: {
        'clhr9yviq0004jis7c93rdjzn': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])}, fieldFilterExpessions: {
        'clhr9yviq0005jis733a795q2': [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, undefined])}, undefined])}))
      }})), timeConstraints: {maxDurationSeconds: faker.datatype.number()}, groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), approval: {users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), groups: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, metadata: {createdAt: faker.random.word(), createdBy: faker.random.word(), updatedAt: faker.random.word(), updatedBy: faker.random.word(), updateMessage: faker.helpers.randomize([faker.random.word(), undefined])}, priority: faker.datatype.number()})

export const getAdminUpdateAccessRuleMock = () => ({id: faker.random.word(), name: faker.random.word(), description: faker.random.word(), targets: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({targetGroup: {id: faker.random.word(), schema: {
        'clhr9yvis0006jis7b6n04gll': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])}, fieldFilterExpessions: {
        'clhr9yvis0007jis7139ba7tq': [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), operations: faker.helpers.randomize([{operationType: faker.helpers.randomize(Object.values(ResourceFilterOperationTypeEnum)), value: faker.helpers.randomize([faker.random.word(), undefined]), attribute: faker.random.word(), values: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, undefined])}, undefined])}))
      }})), timeConstraints: {maxDurationSeconds: faker.datatype.number()}, groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), approval: {users: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), groups: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined])}, metadata: {createdAt: faker.random.word(), createdBy: faker.random.word(), updatedAt: faker.random.word(), updatedBy: faker.random.word(), updateMessage: faker.helpers.randomize([faker.random.word(), undefined])}, priority: faker.datatype.number()})

export const getAdminListRequestsMock = () => ({requests: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), purpose: {reason: faker.helpers.randomize([faker.random.word(), undefined])}, accessGroups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), requestId: faker.random.word(), status: faker.helpers.randomize(Object.values(RequestAccessGroupStatus)), requestedTiming: {durationSeconds: faker.datatype.number(), startTime: faker.helpers.randomize([faker.random.word(), undefined])}, overrideTiming: faker.helpers.randomize([{durationSeconds: faker.datatype.number(), startTime: faker.helpers.randomize([faker.random.word(), undefined])}, undefined]), updatedAt: faker.random.word(), createdAt: faker.random.word(), requestedBy: {id: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.random.word(), picture: faker.helpers.randomize([faker.random.word(), undefined])}, targets: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), requestId: faker.random.word(), accessGroupId: faker.random.word(), targetGroupId: faker.random.word(), targetKind: {publisher: faker.random.word(), name: faker.random.word(), kind: faker.random.word(), icon: faker.random.word()}, fields: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), fieldTitle: faker.random.word(), fieldDescription: faker.helpers.randomize([faker.random.word(), undefined]), valueLabel: faker.random.word(), valueDescription: faker.helpers.randomize([faker.random.word(), undefined]), value: faker.random.word()})), status: faker.helpers.randomize(Object.values(RequestAccessGroupTargetStatus)), requestedBy: {id: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.random.word(), picture: faker.helpers.randomize([faker.random.word(), undefined])}})), approvalMethod: faker.helpers.randomize([faker.helpers.randomize(Object.values(RequestAccessGroupApprovalMethod)), undefined]), accessRule: {timeConstraints: {maxDurationSeconds: faker.datatype.number()}}, requestStatus: faker.helpers.randomize(Object.values(RequestStatus)), requestReviewers: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), groupReviewers: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), undefined]), finalTiming: faker.helpers.randomize([{startTime: faker.random.word(), endTime: faker.random.word()}, undefined])})), requestedBy: {id: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.random.word(), picture: faker.helpers.randomize([faker.random.word(), undefined])}, requestedAt: faker.random.word(), status: faker.helpers.randomize(Object.values(RequestStatus)), targetCount: faker.datatype.number()})), next: faker.helpers.randomize([faker.random.word(), null])})

export const getAdminUpdateUserMock = () => ({id: faker.random.word(), email: faker.random.word(), firstName: faker.random.word(), picture: faker.random.word(), status: faker.helpers.randomize(Object.values(IdpStatus)), lastName: faker.random.word(), updatedAt: faker.random.word(), groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word()))})

export const getAdminListUsersMock = () => ({users: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), email: faker.random.word(), firstName: faker.random.word(), picture: faker.random.word(), status: faker.helpers.randomize(Object.values(IdpStatus)), lastName: faker.random.word(), updatedAt: faker.random.word(), groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word()))})), next: faker.helpers.randomize([faker.random.word(), null])})

export const getAdminCreateUserMock = () => ({id: faker.random.word(), email: faker.random.word(), firstName: faker.random.word(), picture: faker.random.word(), status: faker.helpers.randomize(Object.values(IdpStatus)), lastName: faker.random.word(), updatedAt: faker.random.word(), groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word()))})

export const getAdminListGroupsMock = () => ({groups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({name: faker.random.word(), description: faker.random.word(), id: faker.random.word(), memberCount: faker.datatype.number(), members: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), source: faker.random.word()})), next: faker.helpers.randomize([faker.random.word(), null])})

export const getAdminCreateGroupMock = () => ({name: faker.random.word(), description: faker.random.word(), id: faker.random.word(), memberCount: faker.datatype.number(), members: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), source: faker.random.word()})

export const getAdminGetGroupMock = () => ({name: faker.random.word(), description: faker.random.word(), id: faker.random.word(), memberCount: faker.datatype.number(), members: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), source: faker.random.word()})

export const getAdminUpdateGroupMock = () => ({name: faker.random.word(), description: faker.random.word(), id: faker.random.word(), memberCount: faker.datatype.number(), members: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => (faker.random.word())), source: faker.random.word()})

export const getAdminGetIdentityConfigurationMock = () => ({identityProvider: faker.random.word(), administratorGroupId: faker.random.word()})

export const getAdminGetHandlerMock = () => ({id: faker.random.word(), runtime: faker.random.word(), functionArn: faker.random.word(), awsAccount: faker.random.word(), awsRegion: faker.random.word(), healthy: faker.datatype.boolean(), diagnostics: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({level: faker.helpers.randomize(Object.values(LogLevel)), code: faker.random.word(), message: faker.random.word()}))})

export const getAdminDeleteHandlerMock = () => ({})

export const getAdminListHandlersMock = () => ({res: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), runtime: faker.random.word(), functionArn: faker.random.word(), awsAccount: faker.random.word(), awsRegion: faker.random.word(), healthy: faker.datatype.boolean(), diagnostics: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({level: faker.helpers.randomize(Object.values(LogLevel)), code: faker.random.word(), message: faker.random.word()}))})), next: faker.random.word()})

export const getAdminRegisterHandlerMock = () => ({id: faker.random.word(), runtime: faker.random.word(), functionArn: faker.random.word(), awsAccount: faker.random.word(), awsRegion: faker.random.word(), healthy: faker.datatype.boolean(), diagnostics: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({level: faker.helpers.randomize(Object.values(LogLevel)), code: faker.random.word(), message: faker.random.word()}))})

export const getAdminGetTargetGroupMock = () => ({id: faker.random.word(), schema: {
        'clhr9yvk60008jis75twy98na': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])})

export const getAdminGetTargetGroupResourcesMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({targetGroupId: faker.random.word(), resourceType: faker.random.word(), resource: {id: faker.random.word(), name: faker.random.word(), attributes: {}}})))

export const getAdminListTargetGroupsMock = () => ({targetGroups: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), schema: {
        'clhr9yvke0009jis744phf9o4': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])}))})

export const getAdminCreateTargetGroupMock = () => ({id: faker.random.word(), schema: {
        'clhr9yvkf000ajis78cb97qs6': {id: faker.random.word(), title: faker.random.word(), description: faker.helpers.randomize([faker.random.word(), undefined]), resourceSchema: faker.helpers.randomize([{}, undefined]), resource: faker.helpers.randomize([faker.random.word(), undefined])}
      }, from: {publisher: faker.random.word(), name: faker.random.word(), version: faker.random.word(), kind: faker.random.word()}, icon: faker.random.word(), createdAt: faker.helpers.randomize([faker.random.word(), undefined]), updatedAt: faker.helpers.randomize([faker.random.word(), undefined])})

export const getAdminCreateTargetGroupLinkMock = () => ({targetGroupId: faker.random.word(), handlerId: faker.random.word(), kind: faker.random.word(), priority: faker.datatype.number(), valid: faker.datatype.boolean(), diagnostics: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({level: faker.helpers.randomize(Object.values(LogLevel)), code: faker.random.word(), message: faker.random.word()}))})

export const getAdminMSW = () => [
rest.get('*/api/v1/admin/deployment/version', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetDeploymentVersionMock()),
        )
      }),rest.get('*/api/v1/admin/access-rules', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListAccessRulesMock()),
        )
      }),rest.post('*/api/v1/admin/access-rules', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminCreateAccessRuleMock()),
        )
      }),rest.get('*/api/v1/admin/access-rules/:ruleId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetAccessRuleMock()),
        )
      }),rest.put('*/api/v1/admin/access-rules/:ruleId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminUpdateAccessRuleMock()),
        )
      }),rest.get('*/api/v1/admin/requests', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListRequestsMock()),
        )
      }),rest.post('*/api/v1/admin/users/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminUpdateUserMock()),
        )
      }),rest.get('*/api/v1/admin/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListUsersMock()),
        )
      }),rest.post('*/api/v1/admin/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminCreateUserMock()),
        )
      }),rest.get('*/api/v1/admin/groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListGroupsMock()),
        )
      }),rest.post('*/api/v1/admin/groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminCreateGroupMock()),
        )
      }),rest.get('*/api/v1/admin/groups/:groupId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetGroupMock()),
        )
      }),rest.put('*/api/v1/admin/groups/:groupId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminUpdateGroupMock()),
        )
      }),rest.delete('*/api/v1/admin/groups/:groupId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/v1/admin/identity/sync', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/v1/admin/identity', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetIdentityConfigurationMock()),
        )
      }),rest.get('*/api/v1/admin/handlers/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetHandlerMock()),
        )
      }),rest.delete('*/api/v1/admin/handlers/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminDeleteHandlerMock()),
        )
      }),rest.get('*/api/v1/admin/handlers', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListHandlersMock()),
        )
      }),rest.post('*/api/v1/admin/handlers', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminRegisterHandlerMock()),
        )
      }),rest.get('*/api/v1/admin/target-groups/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetTargetGroupMock()),
        )
      }),rest.delete('*/api/v1/admin/target-groups/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/v1/admin/target-groups/:id/resources/:resourceType', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminGetTargetGroupResourcesMock()),
        )
      }),rest.get('*/api/v1/admin/target-groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminListTargetGroupsMock()),
        )
      }),rest.post('*/api/v1/admin/target-groups', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminCreateTargetGroupMock()),
        )
      }),rest.post('*/api/v1/admin/target-groups/:id/link', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAdminCreateTargetGroupLinkMock()),
        )
      }),rest.post('*/api/v1/admin/target-groups/:id/unlink', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/v1/admin/healthcheck-handlers', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
