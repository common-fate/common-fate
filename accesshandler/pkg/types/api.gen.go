// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/common-fate/iso8601"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for ArgumentFormElement.
const (
	INPUT       ArgumentFormElement = "INPUT"
	MULTISELECT ArgumentFormElement = "MULTISELECT"
	SELECT      ArgumentFormElement = "SELECT"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for LogLevel.
const (
	LogLevelERROR   LogLevel = "ERROR"
	LogLevelINFO    LogLevel = "INFO"
	LogLevelWARNING LogLevel = "WARNING"
)

// Defines values for ProviderConfigValidationStatus.
const (
	ERROR      ProviderConfigValidationStatus = "ERROR"
	INPROGRESS ProviderConfigValidationStatus = "IN_PROGRESS"
	PENDING    ProviderConfigValidationStatus = "PENDING"
	SUCCESS    ProviderConfigValidationStatus = "SUCCESS"
)

// Instructions on how to access the requested resource.
//
// The `instructions` field will be null if no instructions are available.
type AccessInstructions struct {
	// Instructions on how to access the role or resource.
	Instructions *string `json:"instructions,omitempty"`
}

// ArgSchema defines model for ArgSchema.
type ArgSchema struct {
	AdditionalProperties map[string]Argument `json:"-"`
}

// Argument defines model for Argument.
type Argument struct {
	Description *string             `json:"description,omitempty"`
	FormElement ArgumentFormElement `json:"formElement"`
	Groups      *Argument_Groups    `json:"groups,omitempty"`
	Id          string              `json:"id"`
	Title       string              `json:"title"`
}

// ArgumentFormElement defines model for Argument.FormElement.
type ArgumentFormElement string

// Argument_Groups defines model for Argument.Groups.
type Argument_Groups struct {
	AdditionalProperties map[string]Group `json:"-"`
}

// A grant to be created.
type CreateGrant struct {
	// The end time of the grant in ISO8601 format.
	End iso8601.Time `json:"end"`

	// An id to assign to this new grant
	Id string `json:"id"`

	// The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// The start time of the grant in ISO8601 format.
	Start iso8601.Time `json:"start"`

	// The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`

	// Provider-specific grant data. Must match the provider's schema.
	With CreateGrant_With `json:"with"`
}

// Provider-specific grant data. Must match the provider's schema.
type CreateGrant_With struct {
	AdditionalProperties map[string]string `json:"-"`
}

// A temporary assignment of a user to a principal.
type Grant struct {
	// The end time of the grant in ISO8601 format.
	End iso8601.Time `json:"end"`
	ID  string       `json:"id"`

	// The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// The start time of the grant in ISO8601 format.
	Start iso8601.Time `json:"start"`

	// The current state of the grant.
	Status GrantStatus `json:"status"`

	// The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`

	// Provider-specific grant data. Must match the provider's schema.
	With Grant_With `json:"with"`
}

// The current state of the grant.
type GrantStatus string

// Provider-specific grant data. Must match the provider's schema.
type Grant_With struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Group defines model for Group.
type Group struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// GroupOption defines model for GroupOption.
type GroupOption struct {
	Children    []string `json:"children"`
	Description *string  `json:"description,omitempty"`
	Label       string   `json:"label"`
	Value       string   `json:"value"`
}

// Groups defines model for Groups.
type Groups struct {
	AdditionalProperties map[string][]GroupOption `json:"-"`
}

// A log entry.
type Log struct {
	// The log level.
	Level LogLevel `json:"level"`

	// The log message.
	Msg string `json:"msg"`
}

// The log level.
type LogLevel string

// Option defines model for Option.
type Option struct {
	Description *string `json:"description,omitempty"`
	Label       string  `json:"label"`
	Value       string  `json:"value"`
}

// Provider
type Provider struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// A validation against the configuration values of the Access Provider.
type ProviderConfigValidation struct {
	// The particular config fields validated, if any.
	FieldsValidated []string `json:"fieldsValidated"`

	// The ID of the validation, such as `list-sso-users`.
	Id   string `json:"id"`
	Logs []Log  `json:"logs"`
	Name string `json:"name"`

	// The status of the validation.
	Status ProviderConfigValidationStatus `json:"status"`
}

// The status of the validation.
type ProviderConfigValidationStatus string

// ProviderHealth defines model for ProviderHealth.
type ProviderHealth struct {
	// A descriptive error message, if the provider isn't healthy.
	Error *string `json:"error"`

	// Whether the provider is healthy.
	Healthy bool `json:"healthy"`

	// The provider ID.
	ID string `json:"id"`
}

// ArgOptionsResponse defines model for ArgOptionsResponse.
type ArgOptionsResponse struct {
	Groups *Groups `json:"groups,omitempty"`

	// The suggested options.
	Options []Option `json:"options"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// GrantResponse defines model for GrantResponse.
type GrantResponse struct {
	// A temporary assignment of a user to a principal.
	Grant Grant `json:"grant"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Health *ProviderHealth `json:"health,omitempty"`
}

// ValidateResponse defines model for ValidateResponse.
type ValidateResponse struct {
	Validations []ProviderConfigValidation `json:"validations"`
}

// ValidateRequest defines model for ValidateRequest.
type ValidateRequest struct {
	// The full type definition of the provider
	Uses string `json:"uses"`

	// The provider's configuration.
	With map[string]string `json:"with"`
}

// PostGrantsJSONBody defines parameters for PostGrants.
type PostGrantsJSONBody = CreateGrant

// ValidateGrantJSONBody defines parameters for ValidateGrant.
type ValidateGrantJSONBody = CreateGrant

// PostGrantsRevokeJSONBody defines parameters for PostGrantsRevoke.
type PostGrantsRevokeJSONBody struct {
	// An id representiing the user calling this API will be included in the GrantRevoked event
	RevokerId string `json:"revokerId"`
}

// GetAccessInstructionsParams defines parameters for GetAccessInstructions.
type GetAccessInstructionsParams struct {
	// the user's email address
	Subject string `form:"subject" json:"subject"`

	// the argument payload in JSON format
	Args string `form:"args" json:"args"`

	// ID of the grant instructions
	GrantId string `form:"grantId" json:"grantId"`
}

// PostGrantsJSONRequestBody defines body for PostGrants for application/json ContentType.
type PostGrantsJSONRequestBody = PostGrantsJSONBody

// ValidateGrantJSONRequestBody defines body for ValidateGrant for application/json ContentType.
type ValidateGrantJSONRequestBody = ValidateGrantJSONBody

// PostGrantsRevokeJSONRequestBody defines body for PostGrantsRevoke for application/json ContentType.
type PostGrantsRevokeJSONRequestBody PostGrantsRevokeJSONBody

// ValidateSetupJSONRequestBody defines body for ValidateSetup for application/json ContentType.
type ValidateSetupJSONRequestBody ValidateRequest

// Getter for additional properties for ArgSchema. Returns the specified
// element and whether it was found
func (a ArgSchema) Get(fieldName string) (value Argument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ArgSchema
func (a *ArgSchema) Set(fieldName string, value Argument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Argument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ArgSchema to handle AdditionalProperties
func (a *ArgSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Argument)
		for fieldName, fieldBuf := range object {
			var fieldVal Argument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ArgSchema to handle AdditionalProperties
func (a ArgSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Argument_Groups. Returns the specified
// element and whether it was found
func (a Argument_Groups) Get(fieldName string) (value Group, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Argument_Groups
func (a *Argument_Groups) Set(fieldName string, value Group) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Group)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Argument_Groups to handle AdditionalProperties
func (a *Argument_Groups) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Group)
		for fieldName, fieldBuf := range object {
			var fieldVal Group
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Argument_Groups to handle AdditionalProperties
func (a Argument_Groups) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateGrant_With. Returns the specified
// element and whether it was found
func (a CreateGrant_With) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateGrant_With
func (a *CreateGrant_With) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateGrant_With to handle AdditionalProperties
func (a *CreateGrant_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateGrant_With to handle AdditionalProperties
func (a CreateGrant_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Grant_With. Returns the specified
// element and whether it was found
func (a Grant_With) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Grant_With
func (a *Grant_With) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Grant_With to handle AdditionalProperties
func (a *Grant_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Grant_With to handle AdditionalProperties
func (a Grant_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Groups. Returns the specified
// element and whether it was found
func (a Groups) Get(fieldName string) (value []GroupOption, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Groups
func (a *Groups) Set(fieldName string, value []GroupOption) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]GroupOption)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Groups to handle AdditionalProperties
func (a *Groups) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]GroupOption)
		for fieldName, fieldBuf := range object {
			var fieldVal []GroupOption
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Groups to handle AdditionalProperties
func (a Groups) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGrants request
	GetGrants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGrants request with any body
	PostGrantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGrants(ctx context.Context, body PostGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateGrant request with any body
	ValidateGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateGrant(ctx context.Context, body ValidateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGrantsRevoke request with any body
	PostGrantsRevokeWithBody(ctx context.Context, grantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGrantsRevoke(ctx context.Context, grantId string, body PostGrantsRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProviders request
	ListProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshAccessProviders request
	RefreshAccessProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessInstructions request
	GetAccessInstructions(ctx context.Context, providerId string, params *GetAccessInstructionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderArgs request
	GetProviderArgs(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProviderArgOptions request
	ListProviderArgOptions(ctx context.Context, providerId string, argId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateSetup request with any body
	ValidateSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateSetup(ctx context.Context, body ValidateSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGrants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGrantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGrantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGrantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGrants(ctx context.Context, body PostGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGrantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateGrantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateGrant(ctx context.Context, body ValidateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateGrantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGrantsRevokeWithBody(ctx context.Context, grantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGrantsRevokeRequestWithBody(c.Server, grantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGrantsRevoke(ctx context.Context, grantId string, body PostGrantsRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGrantsRevokeRequest(c.Server, grantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshAccessProviders(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshAccessProvidersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessInstructions(ctx context.Context, providerId string, params *GetAccessInstructionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessInstructionsRequest(c.Server, providerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderArgs(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderArgsRequest(c.Server, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProviderArgOptions(ctx context.Context, providerId string, argId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProviderArgOptionsRequest(c.Server, providerId, argId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSetupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSetupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSetup(ctx context.Context, body ValidateSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSetupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGrantsRequest generates requests for GetGrants
func NewGetGrantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGrantsRequest calls the generic PostGrants builder with application/json body
func NewPostGrantsRequest(server string, body PostGrantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGrantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGrantsRequestWithBody generates requests for PostGrants with any type of body
func NewPostGrantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateGrantRequest calls the generic ValidateGrant builder with application/json body
func NewValidateGrantRequest(server string, body ValidateGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateGrantRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateGrantRequestWithBody generates requests for ValidateGrant with any type of body
func NewValidateGrantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGrantsRevokeRequest calls the generic PostGrantsRevoke builder with application/json body
func NewPostGrantsRevokeRequest(server string, grantId string, body PostGrantsRevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGrantsRevokeRequestWithBody(server, grantId, "application/json", bodyReader)
}

// NewPostGrantsRevokeRequestWithBody generates requests for PostGrantsRevoke with any type of body
func NewPostGrantsRevokeRequestWithBody(server string, grantId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "grantId", runtime.ParamLocationPath, grantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants/%s/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProvidersRequest generates requests for ListProviders
func NewListProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshAccessProvidersRequest generates requests for RefreshAccessProviders
func NewRefreshAccessProvidersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessInstructionsRequest generates requests for GetAccessInstructions
func NewGetAccessInstructionsRequest(server string, providerId string, params *GetAccessInstructionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers/%s/access-instructions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, params.Subject); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "args", runtime.ParamLocationQuery, params.Args); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grantId", runtime.ParamLocationQuery, params.GrantId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderArgsRequest generates requests for GetProviderArgs
func NewGetProviderArgsRequest(server string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers/%s/args", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProviderArgOptionsRequest generates requests for ListProviderArgOptions
func NewListProviderArgOptionsRequest(server string, providerId string, argId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "argId", runtime.ParamLocationPath, argId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/providers/%s/args/%s/options", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateSetupRequest calls the generic ValidateSetup builder with application/json body
func NewValidateSetupRequest(server string, body ValidateSetupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateSetupRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateSetupRequestWithBody generates requests for ValidateSetup with any type of body
func NewValidateSetupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/setup/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGrants request
	GetGrantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGrantsResponse, error)

	// PostGrants request with any body
	PostGrantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGrantsResponse, error)

	PostGrantsWithResponse(ctx context.Context, body PostGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGrantsResponse, error)

	// ValidateGrant request with any body
	ValidateGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateGrantResponse, error)

	ValidateGrantWithResponse(ctx context.Context, body ValidateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateGrantResponse, error)

	// PostGrantsRevoke request with any body
	PostGrantsRevokeWithBodyWithResponse(ctx context.Context, grantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGrantsRevokeResponse, error)

	PostGrantsRevokeWithResponse(ctx context.Context, grantId string, body PostGrantsRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGrantsRevokeResponse, error)

	// GetHealth request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// ListProviders request
	ListProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error)

	// RefreshAccessProviders request
	RefreshAccessProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshAccessProvidersResponse, error)

	// GetProvider request
	GetProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// GetAccessInstructions request
	GetAccessInstructionsWithResponse(ctx context.Context, providerId string, params *GetAccessInstructionsParams, reqEditors ...RequestEditorFn) (*GetAccessInstructionsResponse, error)

	// GetProviderArgs request
	GetProviderArgsWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetProviderArgsResponse, error)

	// ListProviderArgOptions request
	ListProviderArgOptionsWithResponse(ctx context.Context, providerId string, argId string, reqEditors ...RequestEditorFn) (*ListProviderArgOptionsResponse, error)

	// ValidateSetup request with any body
	ValidateSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSetupResponse, error)

	ValidateSetupWithResponse(ctx context.Context, body ValidateSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSetupResponse, error)
}

type GetGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Grants *[]Grant `json:"grants,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// A temporary assignment of a user to a principal.
		Grant Grant `json:"grant"`
	}
	JSON400 *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGrantsRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// A temporary assignment of a user to a principal.
		Grant Grant `json:"grant"`
	}
	JSON400 *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGrantsRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGrantsRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Health *ProviderHealth `json:"health,omitempty"`
	}
	JSON500 *struct {
		Health *ProviderHealth `json:"health,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Provider
	JSON500      *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshAccessProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Provider
}

// Status returns HTTPResponse.Status
func (r RefreshAccessProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshAccessProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
	JSON404      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessInstructionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessInstructions
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccessInstructionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessInstructionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderArgsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArgSchema
	JSON404      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProviderArgsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderArgsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProviderArgOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Groups *Groups `json:"groups,omitempty"`

		// The suggested options.
		Options []Option `json:"options"`
	}
	JSON404 *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListProviderArgOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProviderArgOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Validations []ProviderConfigValidation `json:"validations"`
	}
	JSON400 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGrantsWithResponse request returning *GetGrantsResponse
func (c *ClientWithResponses) GetGrantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGrantsResponse, error) {
	rsp, err := c.GetGrants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGrantsResponse(rsp)
}

// PostGrantsWithBodyWithResponse request with arbitrary body returning *PostGrantsResponse
func (c *ClientWithResponses) PostGrantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGrantsResponse, error) {
	rsp, err := c.PostGrantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGrantsResponse(rsp)
}

func (c *ClientWithResponses) PostGrantsWithResponse(ctx context.Context, body PostGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGrantsResponse, error) {
	rsp, err := c.PostGrants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGrantsResponse(rsp)
}

// ValidateGrantWithBodyWithResponse request with arbitrary body returning *ValidateGrantResponse
func (c *ClientWithResponses) ValidateGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateGrantResponse, error) {
	rsp, err := c.ValidateGrantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateGrantResponse(rsp)
}

func (c *ClientWithResponses) ValidateGrantWithResponse(ctx context.Context, body ValidateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateGrantResponse, error) {
	rsp, err := c.ValidateGrant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateGrantResponse(rsp)
}

// PostGrantsRevokeWithBodyWithResponse request with arbitrary body returning *PostGrantsRevokeResponse
func (c *ClientWithResponses) PostGrantsRevokeWithBodyWithResponse(ctx context.Context, grantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGrantsRevokeResponse, error) {
	rsp, err := c.PostGrantsRevokeWithBody(ctx, grantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGrantsRevokeResponse(rsp)
}

func (c *ClientWithResponses) PostGrantsRevokeWithResponse(ctx context.Context, grantId string, body PostGrantsRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGrantsRevokeResponse, error) {
	rsp, err := c.PostGrantsRevoke(ctx, grantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGrantsRevokeResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ListProvidersWithResponse request returning *ListProvidersResponse
func (c *ClientWithResponses) ListProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error) {
	rsp, err := c.ListProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProvidersResponse(rsp)
}

// RefreshAccessProvidersWithResponse request returning *RefreshAccessProvidersResponse
func (c *ClientWithResponses) RefreshAccessProvidersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshAccessProvidersResponse, error) {
	rsp, err := c.RefreshAccessProviders(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshAccessProvidersResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// GetAccessInstructionsWithResponse request returning *GetAccessInstructionsResponse
func (c *ClientWithResponses) GetAccessInstructionsWithResponse(ctx context.Context, providerId string, params *GetAccessInstructionsParams, reqEditors ...RequestEditorFn) (*GetAccessInstructionsResponse, error) {
	rsp, err := c.GetAccessInstructions(ctx, providerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessInstructionsResponse(rsp)
}

// GetProviderArgsWithResponse request returning *GetProviderArgsResponse
func (c *ClientWithResponses) GetProviderArgsWithResponse(ctx context.Context, providerId string, reqEditors ...RequestEditorFn) (*GetProviderArgsResponse, error) {
	rsp, err := c.GetProviderArgs(ctx, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderArgsResponse(rsp)
}

// ListProviderArgOptionsWithResponse request returning *ListProviderArgOptionsResponse
func (c *ClientWithResponses) ListProviderArgOptionsWithResponse(ctx context.Context, providerId string, argId string, reqEditors ...RequestEditorFn) (*ListProviderArgOptionsResponse, error) {
	rsp, err := c.ListProviderArgOptions(ctx, providerId, argId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProviderArgOptionsResponse(rsp)
}

// ValidateSetupWithBodyWithResponse request with arbitrary body returning *ValidateSetupResponse
func (c *ClientWithResponses) ValidateSetupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSetupResponse, error) {
	rsp, err := c.ValidateSetupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSetupResponse(rsp)
}

func (c *ClientWithResponses) ValidateSetupWithResponse(ctx context.Context, body ValidateSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSetupResponse, error) {
	rsp, err := c.ValidateSetup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSetupResponse(rsp)
}

// ParseGetGrantsResponse parses an HTTP response from a GetGrantsWithResponse call
func ParseGetGrantsResponse(rsp *http.Response) (*GetGrantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Grants *[]Grant `json:"grants,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGrantsResponse parses an HTTP response from a PostGrantsWithResponse call
func ParsePostGrantsResponse(rsp *http.Response) (*PostGrantsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// A temporary assignment of a user to a principal.
			Grant Grant `json:"grant"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseValidateGrantResponse parses an HTTP response from a ValidateGrantWithResponse call
func ParseValidateGrantResponse(rsp *http.Response) (*ValidateGrantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGrantsRevokeResponse parses an HTTP response from a PostGrantsRevokeWithResponse call
func ParsePostGrantsRevokeResponse(rsp *http.Response) (*PostGrantsRevokeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGrantsRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// A temporary assignment of a user to a principal.
			Grant Grant `json:"grant"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Health *ProviderHealth `json:"health,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Health *ProviderHealth `json:"health,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListProvidersResponse parses an HTTP response from a ListProvidersWithResponse call
func ParseListProvidersResponse(rsp *http.Response) (*ListProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRefreshAccessProvidersResponse parses an HTTP response from a RefreshAccessProvidersWithResponse call
func ParseRefreshAccessProvidersResponse(rsp *http.Response) (*RefreshAccessProvidersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshAccessProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAccessInstructionsResponse parses an HTTP response from a GetAccessInstructionsWithResponse call
func ParseGetAccessInstructionsResponse(rsp *http.Response) (*GetAccessInstructionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessInstructionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessInstructions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProviderArgsResponse parses an HTTP response from a GetProviderArgsWithResponse call
func ParseGetProviderArgsResponse(rsp *http.Response) (*GetProviderArgsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderArgsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArgSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListProviderArgOptionsResponse parses an HTTP response from a ListProviderArgOptionsWithResponse call
func ParseListProviderArgOptionsResponse(rsp *http.Response) (*ListProviderArgOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProviderArgOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Groups *Groups `json:"groups,omitempty"`

			// The suggested options.
			Options []Option `json:"options"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseValidateSetupResponse parses an HTTP response from a ValidateSetupWithResponse call
func ParseValidateSetupResponse(rsp *http.Response) (*ValidateSetupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Validations []ProviderConfigValidation `json:"validations"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Grants
	// (GET /api/v1/grants)
	GetGrants(w http.ResponseWriter, r *http.Request)
	// Create Grant
	// (POST /api/v1/grants)
	PostGrants(w http.ResponseWriter, r *http.Request)
	// ValidateGrant
	// (POST /api/v1/grants/validate)
	ValidateGrant(w http.ResponseWriter, r *http.Request)
	// Revoke grant
	// (POST /api/v1/grants/{grantId}/revoke)
	PostGrantsRevoke(w http.ResponseWriter, r *http.Request, grantId string)
	// Healthcheck
	// (GET /api/v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/providers)
	ListProviders(w http.ResponseWriter, r *http.Request)
	// Refresh Access Providers
	// (POST /api/v1/providers/refresh)
	RefreshAccessProviders(w http.ResponseWriter, r *http.Request)
	// Get provider
	// (GET /api/v1/providers/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId string)
	// Get Access Instructions
	// (GET /api/v1/providers/{providerId}/access-instructions)
	GetAccessInstructions(w http.ResponseWriter, r *http.Request, providerId string, params GetAccessInstructionsParams)
	// Get provider arg schema
	// (GET /api/v1/providers/{providerId}/args)
	GetProviderArgs(w http.ResponseWriter, r *http.Request, providerId string)
	// List provider arg options
	// (GET /api/v1/providers/{providerId}/args/{argId}/options)
	ListProviderArgOptions(w http.ResponseWriter, r *http.Request, providerId string, argId string)
	// Validate an Access Provider's settings
	// (POST /api/v1/setup/validate)
	ValidateSetup(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetGrants operation middleware
func (siw *ServerInterfaceWrapper) GetGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGrants(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostGrants operation middleware
func (siw *ServerInterfaceWrapper) PostGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGrants(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ValidateGrant operation middleware
func (siw *ServerInterfaceWrapper) ValidateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateGrant(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostGrantsRevoke operation middleware
func (siw *ServerInterfaceWrapper) PostGrantsRevoke(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "grantId" -------------
	var grantId string

	err = runtime.BindStyledParameter("simple", false, "grantId", chi.URLParam(r, "grantId"), &grantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGrantsRevoke(w, r, grantId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RefreshAccessProviders operation middleware
func (siw *ServerInterfaceWrapper) RefreshAccessProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshAccessProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccessInstructions operation middleware
func (siw *ServerInterfaceWrapper) GetAccessInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccessInstructionsParams

	// ------------- Required query parameter "subject" -------------
	if paramValue := r.URL.Query().Get("subject"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "subject"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Required query parameter "args" -------------
	if paramValue := r.URL.Query().Get("args"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "args"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "args", r.URL.Query(), &params.Args)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "args", Err: err})
		return
	}

	// ------------- Required query parameter "grantId" -------------
	if paramValue := r.URL.Query().Get("grantId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "grantId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "grantId", r.URL.Query(), &params.GrantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "grantId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccessInstructions(w, r, providerId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderArgs operation middleware
func (siw *ServerInterfaceWrapper) GetProviderArgs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderArgs(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProviderArgOptions operation middleware
func (siw *ServerInterfaceWrapper) ListProviderArgOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// ------------- Path parameter "argId" -------------
	var argId string

	err = runtime.BindStyledParameter("simple", false, "argId", chi.URLParam(r, "argId"), &argId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "argId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviderArgOptions(w, r, providerId, argId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ValidateSetup operation middleware
func (siw *ServerInterfaceWrapper) ValidateSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateSetup(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/grants", wrapper.GetGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/grants", wrapper.PostGrants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/grants/validate", wrapper.ValidateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/grants/{grantId}/revoke", wrapper.PostGrantsRevoke)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/providers/refresh", wrapper.RefreshAccessProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/{providerId}/access-instructions", wrapper.GetAccessInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/{providerId}/args", wrapper.GetProviderArgs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/{providerId}/args/{argId}/options", wrapper.ListProviderArgOptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/setup/validate", wrapper.ValidateSetup)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
