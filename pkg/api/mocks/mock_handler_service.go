// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/common-fate/pkg/api (interfaces: HandlerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	handler "github.com/common-fate/common-fate/pkg/handler"
	types "github.com/common-fate/common-fate/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlerService is a mock of HandlerService interface.
type MockHandlerService struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerServiceMockRecorder
}

// MockHandlerServiceMockRecorder is the mock recorder for MockHandlerService.
type MockHandlerServiceMockRecorder struct {
	mock *MockHandlerService
}

// NewMockHandlerService creates a new mock instance.
func NewMockHandlerService(ctrl *gomock.Controller) *MockHandlerService {
	mock := &MockHandlerService{ctrl: ctrl}
	mock.recorder = &MockHandlerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerService) EXPECT() *MockHandlerServiceMockRecorder {
	return m.recorder
}

// CreateHandler mocks base method.
func (m *MockHandlerService) CreateHandler(arg0 context.Context, arg1 types.CreateTargetGroupDeploymentRequest) (*handler.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHandler", arg0, arg1)
	ret0, _ := ret[0].(*handler.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHandler indicates an expected call of CreateHandler.
func (mr *MockHandlerServiceMockRecorder) CreateHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandler", reflect.TypeOf((*MockHandlerService)(nil).CreateHandler), arg0, arg1)
}
