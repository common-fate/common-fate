// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/common-fate/granted-approvals/accesshandler/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AccessRuleStatus.
const (
	AccessRuleStatusACTIVE   AccessRuleStatus = "ACTIVE"
	AccessRuleStatusARCHIVED AccessRuleStatus = "ARCHIVED"
)

// Defines values for ApprovalMethod.
const (
	AUTOMATIC ApprovalMethod = "AUTOMATIC"
	REVIEWED  ApprovalMethod = "REVIEWED"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for RequestEventFromGrantStatus.
const (
	RequestEventFromGrantStatusACTIVE  RequestEventFromGrantStatus = "ACTIVE"
	RequestEventFromGrantStatusERROR   RequestEventFromGrantStatus = "ERROR"
	RequestEventFromGrantStatusEXPIRED RequestEventFromGrantStatus = "EXPIRED"
	RequestEventFromGrantStatusPENDING RequestEventFromGrantStatus = "PENDING"
	RequestEventFromGrantStatusREVOKED RequestEventFromGrantStatus = "REVOKED"
)

// Defines values for RequestEventToGrantStatus.
const (
	RequestEventToGrantStatusACTIVE  RequestEventToGrantStatus = "ACTIVE"
	RequestEventToGrantStatusERROR   RequestEventToGrantStatus = "ERROR"
	RequestEventToGrantStatusEXPIRED RequestEventToGrantStatus = "EXPIRED"
	RequestEventToGrantStatusPENDING RequestEventToGrantStatus = "PENDING"
	RequestEventToGrantStatusREVOKED RequestEventToGrantStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	RequestStatusAPPROVED  RequestStatus = "APPROVED"
	RequestStatusCANCELLED RequestStatus = "CANCELLED"
	RequestStatusDECLINED  RequestStatus = "DECLINED"
	RequestStatusPENDING   RequestStatus = "PENDING"
)

// Defines values for ReviewDecision.
const (
	APPROVED ReviewDecision = "APPROVED"
	DECLINED ReviewDecision = "DECLINED"
)

// Access Rule contains information for an end user to make a request for access.
type AccessRule struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
type AccessRuleDetail struct {
	// Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// The group IDs that the access rule applies to.
	Groups    []string           `json:"groups"`
	ID        string             `json:"id"`
	IsCurrent bool               `json:"isCurrent"`
	Metadata  AccessRuleMetadata `json:"metadata"`
	Name      string             `json:"name"`

	// The status of an Access Rule.
	Status AccessRuleStatus `json:"status"`

	// A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// The status of an Access Rule.
type AccessRuleStatus string

// A target for an access rule
type AccessRuleTarget struct {
	// Provider
	Provider Provider              `json:"provider"`
	With     AccessRuleTarget_With `json:"with"`
}

// AccessRuleTarget_With defines model for AccessRuleTarget.With.
type AccessRuleTarget_With struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AccessToken defines model for AccessToken.
type AccessToken = string

// Describes whether a request has been approved automatically or from a review
type ApprovalMethod string

// Approver config for access rules
type ApproverConfig struct {
	Groups []string `json:"groups"`

	// The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// A target for an access rule
type CreateAccessRuleTarget struct {
	ProviderId string                      `json:"providerId"`
	With       CreateAccessRuleTarget_With `json:"with"`
}

// CreateAccessRuleTarget_With defines model for CreateAccessRuleTarget.With.
type CreateAccessRuleTarget_With struct {
	AdditionalProperties map[string]string `json:"-"`
}

// A temporary assignment of a user to a principal.
type Grant struct {
	// The end time of the grant.
	End time.Time `json:"end"`

	// The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// The start time of the grant.
	Start time.Time `json:"start"`

	// The current state of the grant.
	Status GrantStatus `json:"status"`

	// The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`
}

// The current state of the grant.
type GrantStatus string

// Group defines model for Group.
type Group struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	MemberCount int    `json:"memberCount"`
	Name        string `json:"name"`
}

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// Provider
type Provider struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// A request to access something made by an end user in Granted.
type Request struct {
	AccessRule RequestAccessRule `json:"accessRule"`

	// Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestAccessRule defines model for RequestAccessRule.
type RequestAccessRule struct {
	Id      string `json:"id"`
	Version string `json:"version"`
}

// A request to access something made by an end user in Granted.
type RequestDetail struct {
	// Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// true if the requesting user is a reviewer of this request.
	CanReview bool `json:"canReview"`

	// A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// The current state of the grant.
	FromGrantStatus *RequestEventFromGrantStatus `json:"fromGrantStatus,omitempty"`

	// The status of an Access Request.
	FromStatus         *RequestStatus `json:"fromStatus,omitempty"`
	FromTiming         *RequestTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool          `json:"grantCreated,omitempty"`
	GrantFailureReason *string        `json:"grantFailureReason,omitempty"`
	Id                 string         `json:"id"`

	// An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// The current state of the grant.
	ToGrantStatus *RequestEventToGrantStatus `json:"toGrantStatus,omitempty"`

	// The status of an Access Request.
	ToStatus *RequestStatus `json:"toStatus,omitempty"`
	ToTiming *RequestTiming `json:"toTiming,omitempty"`
}

// The current state of the grant.
type RequestEventFromGrantStatus string

// The current state of the grant.
type RequestEventToGrantStatus string

// The status of an Access Request.
type RequestStatus string

// RequestTiming defines model for RequestTiming.
type RequestTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// A decision made on an Access Request.
type ReviewDecision string

// Time configuration for an Access Rule.
type TimeConstraints struct {
	// The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// ArgOptionsResponse defines model for ArgOptionsResponse.
type ArgOptionsResponse struct {
	// Whether any options have been suggested for the argument.
	HasOptions bool `json:"hasOptions"`

	// The suggested options.
	Options []externalRef0.Option `json:"options"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// Whether the user is an administrator of Granted.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ListAccessRuleApproversResponse defines model for ListAccessRuleApproversResponse.
type ListAccessRuleApproversResponse struct {
	Next  *string  `json:"next"`
	Users []string `json:"users"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []AccessRuleDetail `json:"accessRules"`
	Next        *string            `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// A request to access something made by an end user in Granted.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// A target for an access rule
	Target CreateAccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// CreateRequestRequest defines model for CreateRequestRequest.
type CreateRequestRequest struct {
	AccessRuleId string        `json:"accessRuleId"`
	Reason       *string       `json:"reason,omitempty"`
	Timing       RequestTiming `json:"timing"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email   openapi_types.Email `json:"email"`
	IsAdmin bool                `json:"isAdmin"`
	Name    string              `json:"name"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// UpdateAccessRuleRequest defines model for UpdateAccessRuleRequest.
type UpdateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`
	Groups      []string       `json:"groups"`
	Name        string         `json:"name"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
	UpdateMessage   *string         `json:"updateMessage,omitempty"`
}

// AdminListAccessRulesParams defines parameters for AdminListAccessRules.
type AdminListAccessRulesParams struct {
	// Filter Access Rules by a particular status.
	Status *AdminListAccessRulesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListAccessRulesParamsStatus defines parameters for AdminListAccessRules.
type AdminListAccessRulesParamsStatus string

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParams defines parameters for AdminListRequests.
type AdminListRequestsParams struct {
	// omit this param to view all results
	Status *AdminListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParamsStatus defines parameters for AdminListRequests.
type AdminListRequestsParamsStatus string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsParams defines parameters for UserListRequests.
type UserListRequestsParams struct {
	// omit this param to view all results
	Status *UserListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// show requests that the user is a reviewer for, rather than requests that the user has made themselves
	Reviewer *bool `form:"reviewer,omitempty" json:"reviewer,omitempty"`

	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsParamsStatus defines parameters for UserListRequests.
type UserListRequestsParamsStatus string

// UserListRequestsPastParams defines parameters for UserListRequestsPast.
type UserListRequestsPastParams struct {
	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsUpcomingParams defines parameters for UserListRequestsUpcoming.
type UserListRequestsUpcomingParams struct {
	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminCreateAccessRuleJSONRequestBody defines body for AdminCreateAccessRule for application/json ContentType.
type AdminCreateAccessRuleJSONRequestBody CreateAccessRuleRequest

// AdminUpdateAccessRuleJSONRequestBody defines body for AdminUpdateAccessRule for application/json ContentType.
type AdminUpdateAccessRuleJSONRequestBody UpdateAccessRuleRequest

// UserCreateRequestJSONRequestBody defines body for UserCreateRequest for application/json ContentType.
type UserCreateRequestJSONRequestBody CreateRequestRequest

// ReviewRequestJSONRequestBody defines body for ReviewRequest for application/json ContentType.
type ReviewRequestJSONRequestBody ReviewRequest

// Getter for additional properties for AccessRuleTarget_With. Returns the specified
// element and whether it was found
func (a AccessRuleTarget_With) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessRuleTarget_With
func (a *AccessRuleTarget_With) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessRuleTarget_With to handle AdditionalProperties
func (a *AccessRuleTarget_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessRuleTarget_With to handle AdditionalProperties
func (a AccessRuleTarget_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateAccessRuleTarget_With. Returns the specified
// element and whether it was found
func (a CreateAccessRuleTarget_With) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateAccessRuleTarget_With
func (a *CreateAccessRuleTarget_With) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateAccessRuleTarget_With to handle AdditionalProperties
func (a *CreateAccessRuleTarget_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateAccessRuleTarget_With to handle AdditionalProperties
func (a CreateAccessRuleTarget_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/access-rules)
	ListUserAccessRules(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/access-rules/{ruleId})
	UserGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rule approvers
	// (GET /api/v1/access-rules/{ruleId}/approvers)
	UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rules
	// (GET /api/v1/admin/access-rules)
	AdminListAccessRules(w http.ResponseWriter, r *http.Request, params AdminListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/admin/access-rules)
	AdminCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/admin/access-rules/{ruleId})
	AdminGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/admin/access-rules/{ruleId})
	AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Archive Access Rule
	// (POST /api/v1/admin/access-rules/{ruleId}/archive)
	AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule version history
	// (GET /api/v1/admin/access-rules/{ruleId}/versions)
	AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule Version
	// (GET /api/v1/admin/access-rules/{ruleId}/versions/{version})
	AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request, ruleId string, version string)
	// List groups
	// (GET /api/v1/admin/groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// Get Group Details
	// (GET /api/v1/admin/groups/{groupId})
	GetGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// List providers
	// (GET /api/v1/admin/providers)
	ListProviders(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId string)
	// Get provider arg schema
	// (GET /api/v1/admin/providers/{providerId}/args)
	GetProviderArgs(w http.ResponseWriter, r *http.Request, providerId string)
	// List provider arg options
	// (GET /api/v1/admin/providers/{providerId}/args/{argId}/options)
	ListProviderArgOptions(w http.ResponseWriter, r *http.Request, providerId string, argId string)
	// Your GET endpoint
	// (GET /api/v1/admin/requests)
	AdminListRequests(w http.ResponseWriter, r *http.Request, params AdminListRequestsParams)
	// Get a request
	// (GET /api/v1/admin/requests/{requestId})
	AdminGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Returns a list of users
	// (GET /api/v1/admin/users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// List my requests
	// (GET /api/v1/requests)
	UserListRequests(w http.ResponseWriter, r *http.Request, params UserListRequestsParams)
	// Create a request
	// (POST /api/v1/requests)
	UserCreateRequest(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /api/v1/requests/past)
	UserListRequestsPast(w http.ResponseWriter, r *http.Request, params UserListRequestsPastParams)
	// Your GET endpoint
	// (GET /api/v1/requests/upcoming)
	UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request, params UserListRequestsUpcomingParams)
	// Get a request
	// (GET /api/v1/requests/{requestId})
	UserGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Instructions
	// (GET /api/v1/requests/{requestId}/access-instructions)
	GetAccessInstructions(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Token
	// (GET /api/v1/requests/{requestId}/access-token)
	GetAccessToken(w http.ResponseWriter, r *http.Request, requestId string)
	// Cancel a request
	// (POST /api/v1/requests/{requestId}/cancel)
	CancelRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// List request events
	// (GET /api/v1/requests/{requestId}/events)
	ListRequestEvents(w http.ResponseWriter, r *http.Request, requestId string)
	// Review a request
	// (POST /api/v1/requests/{requestId}/review)
	ReviewRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Revoke an active request
	// (POST /api/v1/requests/{requestid}/revoke)
	RevokeRequest(w http.ResponseWriter, r *http.Request, requestid string)
	// Get details for the current user
	// (GET /api/v1/users/me)
	GetMe(w http.ResponseWriter, r *http.Request)
	// Get a user
	// (GET /api/v1/users/{userId})
	GetUser(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListUserAccessRules operation middleware
func (siw *ServerInterfaceWrapper) ListUserAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserAccessRules(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetAccessRuleApprovers operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRuleApprovers(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) AdminListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAccessRulesParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAccessRules(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAccessRule(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminArchiveAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminArchiveAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersions operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersions(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersion(w, r, ruleId, version)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProviderArgs operation middleware
func (siw *ServerInterfaceWrapper) GetProviderArgs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProviderArgs(w, r, providerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProviderArgOptions operation middleware
func (siw *ServerInterfaceWrapper) ListProviderArgOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameter("simple", false, "providerId", chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// ------------- Path parameter "argId" -------------
	var argId string

	err = runtime.BindStyledParameter("simple", false, "argId", chi.URLParam(r, "argId"), &argId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "argId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviderArgOptions(w, r, providerId, argId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListRequests operation middleware
func (siw *ServerInterfaceWrapper) AdminListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListRequestsParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListRequests(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetRequest operation middleware
func (siw *ServerInterfaceWrapper) AdminGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetRequest(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListRequests operation middleware
func (siw *ServerInterfaceWrapper) UserListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "reviewer" -------------
	if paramValue := r.URL.Query().Get("reviewer"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "reviewer", r.URL.Query(), &params.Reviewer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewer", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequests(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserCreateRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCreateRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateRequest(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListRequestsPast operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsPast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsPastParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsPast(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListRequestsUpcoming operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsUpcomingParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsUpcoming(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetRequest operation middleware
func (siw *ServerInterfaceWrapper) UserGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetRequest(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccessInstructions operation middleware
func (siw *ServerInterfaceWrapper) GetAccessInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccessInstructions(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAccessToken operation middleware
func (siw *ServerInterfaceWrapper) GetAccessToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccessToken(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CancelRequest operation middleware
func (siw *ServerInterfaceWrapper) CancelRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelRequest(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListRequestEvents operation middleware
func (siw *ServerInterfaceWrapper) ListRequestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRequestEvents(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ReviewRequest operation middleware
func (siw *ServerInterfaceWrapper) ReviewRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReviewRequest(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RevokeRequest operation middleware
func (siw *ServerInterfaceWrapper) RevokeRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameter("simple", false, "requestid", chi.URLParam(r, "requestid"), &requestid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestid", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeRequest(w, r, requestid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules", wrapper.ListUserAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}", wrapper.UserGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}/approvers", wrapper.UserGetAccessRuleApprovers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/archive", wrapper.AdminArchiveAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions", wrapper.AdminGetAccessRuleVersions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions/{version}", wrapper.AdminGetAccessRuleVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.GetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}/args", wrapper.GetProviderArgs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}/args/{argId}/options", wrapper.ListProviderArgOptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests", wrapper.AdminListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests/{requestId}", wrapper.AdminGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests", wrapper.UserListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests", wrapper.UserCreateRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/past", wrapper.UserListRequestsPast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/upcoming", wrapper.UserListRequestsUpcoming)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}", wrapper.UserGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-instructions", wrapper.GetAccessInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-token", wrapper.GetAccessToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/cancel", wrapper.CancelRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/events", wrapper.ListRequestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/review", wrapper.ReviewRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestid}/revoke", wrapper.RevokeRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.GetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.GetUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"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",
>>>>>>> main
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./accesshandler/openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
