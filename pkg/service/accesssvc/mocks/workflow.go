// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/common-fate/pkg/service/accesssvc (interfaces: Workflow)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	access "github.com/common-fate/common-fate/pkg/access"
	rule "github.com/common-fate/common-fate/pkg/rule"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkflow is a mock of Workflow interface.
type MockWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowMockRecorder
}

// MockWorkflowMockRecorder is the mock recorder for MockWorkflow.
type MockWorkflowMockRecorder struct {
	mock *MockWorkflow
}

// NewMockWorkflow creates a new mock instance.
func NewMockWorkflow(ctrl *gomock.Controller) *MockWorkflow {
	mock := &MockWorkflow{ctrl: ctrl}
	mock.recorder = &MockWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflow) EXPECT() *MockWorkflowMockRecorder {
	return m.recorder
}

// Grant mocks base method.
func (m *MockWorkflow) Grant(arg0 context.Context, arg1 access.Request, arg2 rule.AccessRule) (*access.Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grant", arg0, arg1, arg2)
	ret0, _ := ret[0].(*access.Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Grant indicates an expected call of Grant.
func (mr *MockWorkflowMockRecorder) Grant(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grant", reflect.TypeOf((*MockWorkflow)(nil).Grant), arg0, arg1, arg2)
}
