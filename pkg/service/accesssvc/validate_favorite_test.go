package accesssvc

import (
	"context"
	"testing"
	"time"

	"github.com/benbjohnson/clock"
	"github.com/common-fate/ddb/ddbmock"
	"github.com/common-fate/granted-approvals/pkg/access"
	"github.com/common-fate/granted-approvals/pkg/identity"
	"github.com/common-fate/granted-approvals/pkg/rule"
	accessMocks "github.com/common-fate/granted-approvals/pkg/service/accesssvc/mocks"
	"github.com/common-fate/granted-approvals/pkg/storage"
	"github.com/common-fate/granted-approvals/pkg/types"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func TestValidateFavorite(t *testing.T) {
	type testcase struct {
		name                         string
		giveInput                    types.CreateFavoriteRequest
		giveUser                     identity.User
		rule                         *rule.AccessRule
		ruleErr                      error
		wantErr                      error
		want                         *access.Favorite
		withRequestArgumentsResponse map[string]types.RequestArgument
	}

	clk := clock.NewMock()
	testcases := []testcase{
		{
			name: "ok",
			giveInput: types.CreateFavoriteRequest{
				AccessRuleId: "abcd",
				Name:         "new fav",
				Timing: types.RequestTiming{
					DurationSeconds: 3600,
				},
				With: &[]types.CreateRequestWith{
					{
						AdditionalProperties: map[string][]string{
							"accountId": {"a", "b"},
						},
					},
				},
			},
			giveUser: identity.User{
				ID:     "test",
				Groups: []string{"goodgroup"},
			},
			rule: &rule.AccessRule{
				Groups: []string{"goodgroup"},
				TimeConstraints: types.TimeConstraints{
					MaxDurationSeconds: 3600,
				},
				Target: rule.Target{
					WithSelectable: map[string][]string{
						"accountId": {"a", "b"},
					},
				},
			},
			withRequestArgumentsResponse: map[string]types.RequestArgument{
				"accountId": {
					RequiresSelection: true,
					Options: []types.WithOption{
						{
							Value: "a",
							Valid: true,
						},
						{
							Value: "b",
							Valid: true,
						},
					}},
			},
			want: &access.Favorite{
				ID:     "-",
				UserID: "test",
				Data:   access.RequestData{},
				Rule:   "abcd",
				Name:   "new fav",
				RequestedTiming: access.Timing{
					Duration: time.Hour,
				},
				With: []map[string][]string{
					{"accountId": {"a", "b"}},
				},
				CreatedAt: clk.Now(),
				UpdatedAt: clk.Now(),
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			db := ddbmock.New(t)
			db.MockQueryWithErr(&storage.GetAccessRuleCurrent{Result: tc.rule}, tc.ruleErr)
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()
			rs := accessMocks.NewMockAccessRuleService(ctrl)
			if tc.withRequestArgumentsResponse != nil {
				rs.EXPECT().RequestArguments(gomock.Any(), tc.rule.Target).Return(tc.withRequestArgumentsResponse, nil)
			}
			s := Service{
				Clock: clk,
				DB:    db,
				Rules: rs,
			}
			got, err := s.validateFavorite(context.Background(), tc.giveUser, tc.giveInput)
			if got != nil {
				// ignore the autogenerated ID for testing.
				got.ID = "-"
			}
			assert.Equal(t, tc.wantErr, err)
			assert.Equal(t, tc.want, got)
		})
	}

}
