// Package remoteconfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package remoteconfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// The configuration for a Granted Approvals deployment.
type DeploymentConfiguration struct {
	// Configuration of all Access Providers.
	ProviderConfiguration *ProviderMap `json:"providerConfiguration,omitempty"`
}

// Configuration settings for an individual Access Provider.
type ProviderConfiguration struct {
	Uses string                 `json:"uses"`
	With map[string]interface{} `json:"with"`
}

// Configuration of all Access Providers.
type ProviderMap struct {
	AdditionalProperties map[string]ProviderConfiguration `json:"-"`
}

// DeploymentConfigResponse defines model for DeploymentConfigResponse.
type DeploymentConfigResponse struct {
	// The configuration for a Granted Approvals deployment.
	DeploymentConfiguration DeploymentConfiguration `json:"deploymentConfiguration"`
}

// GetConfigJSONRequestBody defines body for GetConfig for application/json ContentType.
type GetConfigJSONRequestBody DeploymentConfigResponse

// Getter for additional properties for ProviderMap. Returns the specified
// element and whether it was found
func (a ProviderMap) Get(fieldName string) (value ProviderConfiguration, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProviderMap
func (a *ProviderMap) Set(fieldName string, value ProviderConfiguration) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProviderConfiguration)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProviderMap to handle AdditionalProperties
func (a *ProviderMap) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProviderConfiguration)
		for fieldName, fieldBuf := range object {
			var fieldVal ProviderConfiguration
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProviderMap to handle AdditionalProperties
func (a ProviderMap) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Deployment Configuration
	// (GET /api/v1/config)
	GetConfig(w http.ResponseWriter, r *http.Request)
	// Update Access Provider configuration
	// (PUT /api/v1/config/providers)
	UpdateProviderConfiguration(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfig(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateProviderConfiguration operation middleware
func (siw *ServerInterfaceWrapper) UpdateProviderConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProviderConfiguration(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/config", wrapper.GetConfig)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/config/providers", wrapper.UpdateProviderConfiguration)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RVwW7cNhD9lQFboBdltU7quNXNbdDAKNoaQYseEh+44mhFm+LQ5Gg3W2P/vRhJtrWS",
	"13ZOosSZ0ZvHN493qqQmkEfPSRV3KuJti4l/IWOx+/ABg6Ndg55/JV/Z9SdMgXxC2SvJM3qWpQ7B2VKz",
	"JZ9fJ/LyLZU1NlpWIVLAyENJMynZxi5Ptr6PWKlCfZc/osr7Min/cCRtv8862DaiUcXno+WvMsW7gKpQ",
	"tLrGktVeMg2mMtrQA1B/1wjlOAuoAq5tgo9Re0YD5yFE2miX4PE/iw7DgPMp0kYdvvS/iiLoF/6WTQiV",
	"GGswfhOdl0PSHzp08NmyE3KOYZ+yl6mvbxJTcHZddxKwRhXKnvAmvPtqNvVNabq6l8fAHTJxsA0Jma1f",
	"p54OD9Ybu7Gm1Q7OyxJTgvuyczba1D8HuImj9Wu1z9TWcj3aeFDBoXy69CH46pGWp9t4HSm3pxRvzs52",
	"dHZrfjwgRciX6THGSj3tLg9aec35TYYhe5ZXqkC7GYdJSJw2KtBe197PVL5Nka9Pfjr9byVTtc+U9RXd",
	"W4Quu1ivG+wANQ15+E0zqky10alC1cwhFbm02ZCvNOPC0ryXcw/nlxedJhxpY/16NBaHc5RBassadALr",
	"E2vnZJgmXYP2BjyxrQbnSg+6GxNyP4ufsCFGmApggzH18E4WS8FMAb0OVhXq3WK5WIo+NdfdeeY62Hxz",
	"kvdQ5csaeT4LH5GPNibIRCLdy4Xpo3tMKhvZ9+6Yfg4cPj9q791U9GuBLv7WNo2OuwHfYyLM7fiwz/ze",
	"n3qzap/o+N9oGdP0hCbWyARcI8T+HFa6vEFvFl/8F/8nMRawxR9iZ6dJkkUdErqRRWfhoh30JpD1DNaD",
	"hqrlNiIMRwhv+jiboGxjRM9uJ3FtQlhhqeUpAEamrFO9Ih0NDC0m0LBurUEjUmoDVI62Arx/m80dXAzX",
	"yyha3mpbieSYQIOxVYWCBhLGjS0xm6CQvrbWOfAEjvwaI2yFzxfoFAInnM4DhOGZ4v4JRjMec8SxbNTb",
	"5XJ+2n/93l+YD4LqCz6Pt7+uhYJOSJ/vRt5R5LmjUruaEhfvT9+fqv3V/v8AAAD//10zp+nbCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
