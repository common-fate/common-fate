openapi: 3.0.0
info:
  title: Approvals
  version: "1.0"
  contact:
    name: Common Fate
    url: "https://commonfate.io"
  description: Granted Approvals API
servers:
  - url: "http://localhost:8080"
paths:
  /api/v1/access-rules:
    get:
      summary: List Access Rules
      tags:
        - End User
      responses:
        "200":
          $ref: "#/components/responses/ListAccessRulesResponse"
      operationId: list-user-access-rules
      description: Get all access rules as an end user.
  "/api/v1/access-rules/{ruleId}":
    get:
      summary: Get Access Rule
      tags:
        - End User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleWithSelectables"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-access-rule
      description: |-
        Get details for an Access Rule.

        End users are only able to view Access Rules if they are a member of the group the rule relates to, or if they are designated as an approver for the Access Rule. If a user doesn't meet these conditions, a HTTP401 unauthorized error is returned.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
  "/api/v1/access-rules/{ruleId}/approvers":
    get:
      summary: List Access Rule approvers
      tags:
        - End User
      responses:
        "200":
          $ref: "#/components/responses/ListAccessRuleApproversResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-access-rule-approvers
      description: |-
        Get the approvers for an access rule. 
        This returns a list of user IDs.

        End users are only able to view Access Rules if they are a member of the group the rule relates to, or if they are designated as an approver for the Access Rule. If a user doesn't meet these conditions, a HTTP401 unauthorized error is returned.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
  /api/v1/requests:
    get:
      summary: List my requests
      tags:
        - End User
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: user-list-requests
      description: |-
        List requests.
        The reviewer query param allows you to fetch requests which you can review.
      parameters:
        - schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
              - CANCELLED
              - PENDING
          in: query
          name: status
          description: omit this param to view all results
        - schema:
            type: boolean
          in: query
          name: reviewer
          description: "show requests that the user is a reviewer for, rather than requests that the user has made themselves"
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
    parameters: []
    post:
      summary: Create a request
      operationId: user-create-request
      responses:
        "201":
          description: Created
      description: |-
        Make a request to access something.

        Users must specify an Access Rule when making a request. Users are authorized to make a request if they are in a group that the Access Rule references. Otherwise, a HTTP 404 response will be returned.
      requestBody:
        $ref: "#/components/requestBodies/CreateRequestRequest"
      tags:
        - End User
  /api/v1/requests/upcoming:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: user-list-requests-upcoming
      description: display pending requests and approved requests that are currently active or scheduled to begin some time in future.
      parameters:
        - schema:
            type: string
          in: query
          description: encrypted token containing pagination info
          name: nextToken
  /api/v1/requests/past:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: user-list-requests-past
      description: |
        display show cancelled, expired, and revoked requests.
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
  "/api/v1/requests/{requestId}":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    get:
      summary: Get a request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-request
      description: |-
        Returns a HTTP401 response if the user is not the requestor or a reviewer.


        Use /api/v1/admin/requests/{requestId} as an administrator to view information for requests not made by the current user (note: requires that the user is a Granted administrator).
      tags:
        - End User
      parameters: []
  "/api/v1/requests/{requestId}/events":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    get:
      summary: List request events
      responses:
        "200":
          $ref: "#/components/responses/ListRequestEventsResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: list-request-events
      description: |
        Returns a HTTP401 response if the user is not the requestor or a reviewer.
      tags:
        - End User
      parameters: []
  "/api/v1/requests/{requestId}/review":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    post:
      summary: Review a request
      operationId: review-request
      responses:
        "200":
          $ref: "#/components/responses/ReviewResponse"
      tags:
        - End User
      description: "Review an access request made by a user. The reviewing user must be an approver for a request. Users cannot review their own requests, even if they are an approver for the Access Rule."
      requestBody:
        $ref: "#/components/requestBodies/ReviewRequest"
  "/api/v1/requests/{requestId}/cancel":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    post:
      summary: Cancel a request
      operationId: cancel-request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      tags:
        - End User
      description: Users can cancel an access request that they have created while it is in the PENDING state.
  "/api/v1/requests/{requestid}/revoke":
    parameters:
      - schema:
          type: string
        name: requestid
        in: path
        required: true
    post:
      summary: Revoke an active request
      operationId: revoke-request
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      tags:
        - End User
      description: "Admins and approvers can revoke access previously approved. Effective immediately "
  "/api/v1/requests/{requestId}/access-instructions":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    get:
      summary: Get Access Instructions
      tags:
        - End User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: ./accesshandler/openapi.yml#/components/schemas/AccessInstructions
      operationId: get-access-instructions
      description: |-
        Get access instructions for a request.

        Returns information on how to access the role or resource.
  "/api/v1/users/{userId}":
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get a user
      tags:
        - End User
      operationId: get-user
      description: Returns a Granted user.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /api/v1/users/me:
    get:
      summary: Get details for the current user
      tags:
        - End User
      operationId: get-me
      description: Returns information about the currently logged in user.
      responses:
        "200":
          $ref: "#/components/responses/AuthUserResponse"
        "401":
          description: Unauthorized
  /api/v1/admin/access-rules:
    get:
      summary: List Access Rules
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListAccessRulesDetailResponse"
      operationId: admin-list-access-rules
      description: List all access rules
      parameters:
        - schema:
            type: string
            enum:
              - ACTIVE
              - ARCHIVED
          in: query
          name: status
          description: Filter Access Rules by a particular status.
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
    post:
      summary: Create Access Rule
      operationId: admin-create-access-rule
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleDetail"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
      description: Create an access rule
      requestBody:
        $ref: "#/components/requestBodies/CreateAccessRuleRequest"
      tags:
        - Admin
    parameters: []
  "/api/v1/admin/access-rules/{ruleId}":
    get:
      summary: Get Access Rule
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleDetail"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-access-rule
      description: Get an Access Rule.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Update Access Rule
      operationId: admin-update-access-rule
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleDetail"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      requestBody:
        $ref: "#/components/requestBodies/UpdateAccessRuleRequest"
      description: Updates an Access Rule. Updating a rule creates a new version.
      tags:
        - Admin
  "/api/v1/admin/access-rules/{ruleId}/archive":
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    post:
      summary: Archive Access Rule
      operationId: admin-archive-access-rule
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleDetail"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: |-
        Marks an access rule as archived.
        Any pending requests for this access rule will be cancelled.
  "/api/v1/admin/access-rules/{ruleId}/versions":
    get:
      summary: Get Access Rule version history
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListAccessRulesDetailResponse"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      operationId: admin-get-access-rule-versions
      description: Returns a version history for a particular Access Rule.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
  "/api/v1/admin/access-rules/{ruleId}/versions/{version}":
    get:
      summary: Get Access Rule Version
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRuleDetail"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-access-rule-version
      description: Returns a specific version for an Access Rule.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
      - schema:
          type: string
        name: version
        in: path
        required: true
  /api/v1/admin/requests:
    get:
      summary: Your GET endpoint
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: admin-list-requests
      description: Return a list of all requests
      parameters:
        - schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
              - CANCELLED
              - PENDING
          in: query
          description: omit this param to view all results
          name: status
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
  "/api/v1/admin/requests/{requestId}":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    get:
      summary: Get a request
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-request
      description: Returns an access request.
      tags:
        - End User
      parameters: []
  /api/v1/admin/users:
    get:
      summary: Returns a list of users
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListUserResponse"
      operationId: get-users
      description: Fetch a list of users
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
  /api/v1/admin/groups:
    get:
      summary: List groups
      tags:
        - Admin
      operationId: get-groups
      description: Gets all groups
      responses:
        "200":
          $ref: "#/components/responses/ListGroupsResponse"
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
    parameters: []
  "/api/v1/admin/groups/{groupId}":
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: Get Group Details
      tags:
        - Admin
      operationId: get-group
      description: Returns information for a group.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/admin/providers:
    get:
      summary: List providers
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: list-providers
      description: List providers
    parameters: []
  "/api/v1/admin/providers/{providerId}":
    get:
      summary: List providers
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: get-provider
      description: Get provider by id
    parameters:
      - schema:
          type: string
        name: providerId
        in: path
        required: true
  "/api/v1/admin/providers/{providerId}/args":
    parameters:
      - schema:
          type: string
        name: providerId
        in: path
        required: true
    get:
      summary: Get provider arg schema
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: get-provider-args
      description: gets the jsonschema describing the args for this provider
  "/api/v1/admin/providers/{providerId}/args/{argId}/options":
    parameters:
      - schema:
          type: string
        name: providerId
        in: path
        required: true
      - schema:
          type: string
        name: argId
        in: path
        required: true
    get:
      summary: List provider arg options
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ArgOptionsResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: list-provider-arg-options
      description: "Returns the options for a particular Access Provider argument. The options may be cached. To refresh the cache, pass the `refresh` query parameter."
      parameters:
        - schema:
            type: boolean
          in: query
          name: refresh
          description: invalidate the cache and refresh the provider's options.
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        Josh:
          id: string
          email: string
          name: string
          picture: "https://avatars.githubusercontent.com/u/17420369?v=4"
        Chris:
          id: string
          email: chris@exponentlabs.io
          name: Chris Norman
          picture: "https://avatars.githubusercontent.com/u/14214200?v=4"
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        picture:
          type: string
        status:
          $ref: "#/components/schemas/IdpStatus"
        lastName:
          type: string
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
      required:
        - id
        - email
        - firstName
        - picture
        - status
        - lastName
        - updatedAt
    Request:
      title: Request
      type: object
      description: A request to access something made by an end user in Granted.
      properties:
        id:
          type: string
          x-go-name: ID
        requestor:
          type: string
        status:
          $ref: "#/components/schemas/RequestStatus"
        reason:
          type: string
        timing:
          $ref: "#/components/schemas/RequestTiming"
        requestedAt:
          type: string
          x-go-type: time.Time
          format: time
        accessRule:
          $ref: "#/components/schemas/RequestAccessRule"
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
        grant:
          $ref: "#/components/schemas/Grant"
        approvalMethod:
          $ref: "#/components/schemas/ApprovalMethod"
      required:
        - id
        - requestor
        - status
        - timing
        - requestedAt
        - accessRule
        - updatedAt
    RequestDetail:
      title: Request
      type: object
      description: A request to access something made by an end user in Granted.
      properties:
        id:
          type: string
          x-go-name: ID
        requestor:
          type: string
        status:
          $ref: "#/components/schemas/RequestStatus"
        reason:
          type: string
        timing:
          $ref: "#/components/schemas/RequestTiming"
        requestedAt:
          type: string
          x-go-type: time.Time
          format: time
        accessRule:
          $ref: "#/components/schemas/AccessRule"
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
        grant:
          $ref: "#/components/schemas/Grant"
        canReview:
          type: boolean
          description: true if the requesting user is a reviewer of this request.
        approvalMethod:
          $ref: "#/components/schemas/ApprovalMethod"
      required:
        - id
        - requestor
        - status
        - timing
        - requestedAt
        - accessRule
        - updatedAt
        - canReview
    RequestStatus:
      type: string
      description: |
        The status of an Access Request.
      enum:
        - APPROVED
        - PENDING
        - CANCELLED
        - DECLINED
      title: RequestStatus
    RequestAccessRule:
      title: RequestAccessRule
      type: object
      properties:
        id:
          type: string
        version:
          type: string
      required:
        - id
        - version
    AccessRule:
      title: AccessRule
      type: object
      description: Access Rule contains information for an end user to make a request for access.
      properties:
        id:
          type: string
          x-go-name: ID
          example: rul_28w2Eebt2Q8nFQJ2dKa1FTE9X0J
        version:
          type: string
          description: |
            A unique version identifier for the Access Rule. Updating a rule creates a new version. 
            When a rule is updated, it's ID remains consistent.
        name:
          type: string
          example: Okta admin
        description:
          type: string
          example: Admin access to Okta
        target:
          $ref: "#/components/schemas/AccessRuleTarget"
        timeConstraints:
          $ref: "#/components/schemas/TimeConstraints"
        isCurrent:
          type: boolean
      required:
        - id
        - version
        - name
        - description
        - target
        - timeConstraints
        - isCurrent
    AccessRuleWithSelectables:
      title: AccessRuleWithSelectables
      type: object
      description: Access Rule contains information for an end user to make a request for access.
      properties:
        id:
          type: string
          x-go-name: ID
          example: rul_28w2Eebt2Q8nFQJ2dKa1FTE9X0J
        version:
          type: string
          description: |
            A unique version identifier for the Access Rule. Updating a rule creates a new version. 
            When a rule is updated, it's ID remains consistent.
        name:
          type: string
          example: Okta admin
        description:
          type: string
          example: Admin access to Okta
        target:
          $ref: "#/components/schemas/AccessRuleTargetDetail"
        timeConstraints:
          $ref: "#/components/schemas/TimeConstraints"
        isCurrent:
          type: boolean
      required:
        - id
        - version
        - name
        - description
        - target
        - timeConstraints
        - isCurrent
    AccessRuleDetail:
      title: AccessRuleDetail
      type: object
      description: AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
      properties:
        id:
          type: string
          x-go-name: ID
          example: rul_28w2Eebt2Q8nFQJ2dKa1FTE9X0J
        version:
          type: string
          description: |
            A unique version identifier for the Access Rule. Updating a rule creates a new version. 
            When a rule is updated, it's ID remains consistent.
        status:
          $ref: "#/components/schemas/AccessRuleStatus"
        groups:
          description: The group IDs that the access rule applies to.
          type: array
          items:
            type: string
        approval:
          $ref: "#/components/schemas/ApproverConfig"
        name:
          type: string
          example: Okta admin
        description:
          type: string
          example: Admin access to Okta
        metadata:
          $ref: "#/components/schemas/AccessRuleMetadata"
        target:
          $ref: "#/components/schemas/AccessRuleTarget"
        timeConstraints:
          $ref: "#/components/schemas/TimeConstraints"
        isCurrent:
          type: boolean
      required:
        - id
        - version
        - status
        - groups
        - approval
        - name
        - description
        - metadata
        - target
        - timeConstraints
        - isCurrent
    AccessRuleStatus:
      type: string
      description: The status of an Access Rule.
      enum:
        - ACTIVE
        - ARCHIVED
      title: AccessRuleStatus
    AccessRuleMetadata:
      title: AccessRuleMetadata
      type: object
      properties:
        createdAt:
          type: string
          x-go-type: time.Time
        createdBy:
          type: string
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
        updatedBy:
          type: string
        updateMessage:
          type: string
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
    CreateAccessRuleTarget:
      title: AccessRuleTarget
      type: object
      description: A target for an access rule
      properties:
        providerId:
          type: string
        with:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: "The with field is a map of options for the field, if more than one option is specified, the requesting user will be able to select one of the options when requesting this rule."
      required:
        - providerId
        - with
    AccessRuleTarget:
      title: AccessRuleTarget
      type: object
      description: A target for an access rule
      properties:
        provider:
          $ref: "#/components/schemas/Provider"
        with:
          type: object
          additionalProperties:
            type: string
        withSelectable:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - provider
        - with
        - withSelectable
    AccessRuleTargetDetail:
      title: AccessRuleTargetDetail
      type: object
      description: A target for an access rule
      properties:
        provider:
          $ref: "#/components/schemas/Provider"
        with:
          type: object
          additionalProperties:
            type: string
        withSelectable:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Selectable"
      required:
        - provider
        - with
        - withSelectable
    ApproverConfig:
      title: ApproverConfig
      type: object
      description: Approver config for access rules
      properties:
        users:
          type: array
          description: The user IDs of the approvers for the request.
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      required:
        - users
        - groups
    TimeConstraints:
      title: TimeConstraints
      type: object
      description: Time configuration for an Access Rule.
      properties:
        maxDurationSeconds:
          type: integer
          description: The maximum duration in seconds the access is allowed for.
          minimum: 60
          exclusiveMinimum: false
      required:
        - maxDurationSeconds
    Provider:
      title: Provider
      type: object
      x-examples:
        AWS:
          id: string
          name: string
          type: aws
        Okta:
          id: string
          name: string
          type: okta
      properties:
        id:
          type: string
        type:
          type: string
      required:
        - id
        - type
      description: "Provider "
    Group:
      title: Group
      type: object
      description: ""
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
        memberCount:
          type: integer
      required:
        - name
        - description
        - id
        - memberCount
    IdpStatus:
      title: IdpStatus
      x-stoplight:
        id: a3fdr17gch04a
      type: string
      enum:
        - ARCHIVED
        - ACTIVE
    ReviewDecision:
      type: string
      title: ReviewDecision
      enum:
        - APPROVED
        - DECLINED
      description: A decision made on an Access Request.
    Grant:
      description: A temporary assignment of a user to a principal.
      type: object
      title: Grant
      properties:
        status:
          type: string
          description: The current state of the grant.
          enum:
            - PENDING
            - ACTIVE
            - ERROR
            - REVOKED
            - EXPIRED
        subject:
          type: string
          minLength: 1
          description: The email address of the user to grant access to.
          format: email
        provider:
          type: string
          minLength: 1
          description: The ID of the provider to grant access to.
          example: okta
        start:
          type: string
          format: date-time
          description: The start time of the grant.
          example: "2022-06-13T03:39:30.921Z"
          x-go-type: time.Time
        end:
          type: string
          format: date-time
          description: The end time of the grant.
          example: "2022-06-13T03:39:30.921Z"
          x-go-type: time.Time
      required:
        - status
        - subject
        - provider
        - start
        - end
    RequestTiming:
      title: RequestTiming
      x-stoplight:
        id: 4ooyqlf8xba5b
      type: object
      properties:
        durationSeconds:
          type: integer
        startTime:
          type: string
          description: iso8601 timestamp in UTC timezone
          x-go-type: time.Time
          format: time
      required:
        - durationSeconds
    ApprovalMethod:
      type: string
      description: "Describes whether a request has been approved automatically or from a review "
      title: ApprovalMethod
      x-stoplight:
        id: 689mlt8aqxnx4
      enum:
        - AUTOMATIC
        - REVIEWED
    RequestEvent:
      title: RequestEvent
      x-stoplight:
        id: x15z5qclesdq9
      type: object
      properties:
        id:
          type: string
        requestId:
          type: string
        createdAt:
          type: string
          x-go-type: time.Time
          format: time
        actor:
          type: string
        fromStatus:
          $ref: "#/components/schemas/RequestStatus"
        toStatus:
          $ref: "#/components/schemas/RequestStatus"
        fromTiming:
          $ref: "#/components/schemas/RequestTiming"
        toTiming:
          $ref: "#/components/schemas/RequestTiming"
        fromGrantStatus:
          type: string
          description: The current state of the grant.
          enum:
            - PENDING
            - ACTIVE
            - ERROR
            - REVOKED
            - EXPIRED
        toGrantStatus:
          type: string
          description: The current state of the grant.
          enum:
            - PENDING
            - ACTIVE
            - ERROR
            - REVOKED
            - EXPIRED
        grantCreated:
          type: boolean
        requestCreated:
          type: boolean
        grantFailureReason:
          type: string
      required:
        - id
        - requestId
        - createdAt
    WithOption:
      title: WithOption
      x-stoplight:
        id: xoejiu5ci05du
      type: object
      properties:
        value:
          type: string
        label:
          type: string
      required:
        - value
        - label
    Selectable:
      title: Selectable
      x-stoplight:
        id: ab18xdxwinqhb
      type: object
      properties:
        option:
          $ref: "#/components/schemas/WithOption"
        valid:
          type: boolean
      required:
        - option
        - valid
    CreateRequestWith:
      title: CreateRequestWith
      x-stoplight:
        id: 8oa3c4w7ml7tx
      type: object
      additionalProperties:
        type: string
  responses:
    ErrorResponse:
      description: An error returned from the service.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
          examples: {}
    ListUserResponse:
      description: Paginated list of users
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              next:
                type: string
                nullable: true
            required:
              - users
              - next
          examples: {}
    ListAccessRulesResponse:
      description: A list of Access Rules.
      content:
        application/json:
          schema:
            type: object
            properties:
              accessRules:
                type: array
                items:
                  $ref: "#/components/schemas/AccessRule"
              next:
                type: string
                nullable: true
            required:
              - accessRules
              - next
    ListRequestsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
              next:
                type: string
                nullable: true
            required:
              - requests
              - next
    ListGroupsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
              next:
                type: string
                nullable: true
            required:
              - groups
              - next
    ReviewResponse:
      description: Response for reviewing a request.
      content:
        application/json:
          schema:
            type: object
            properties:
              request:
                $ref: "#/components/schemas/Request"
    ListAccessRuleApproversResponse:
      description: A list of user ids who can approver an access rule request
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  type: string
              next:
                type: string
                nullable: true
            required:
              - users
              - next
    ListAccessRulesDetailResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              accessRules:
                type: array
                items:
                  $ref: "#/components/schemas/AccessRuleDetail"
              next:
                type: string
                nullable: true
            required:
              - accessRules
              - next
    AuthUserResponse:
      description: Details about the authenticated user
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/User"
              isAdmin:
                description: Whether the user is an administrator of Granted.
                type: boolean
            required:
              - user
              - isAdmin
    ArgOptionsResponse:
      description: Options for an Grant argument.
      content:
        application/json:
          schema:
            type: object
            properties:
              hasOptions:
                type: boolean
                description: Whether any options have been suggested for the argument.
              options:
                type: array
                description: The suggested options.
                items:
                  $ref: ./accesshandler/openapi.yml#/components/schemas/Option
            required:
              - hasOptions
              - options
    ListRequestEventsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              events:
                type: array
                items:
                  $ref: "#/components/schemas/RequestEvent"
              next:
                type: string
                nullable: true
            required:
              - events
              - next
  examples: {}
  securitySchemes: {}
  requestBodies:
    UpdateAccessRuleRequest:
      content:
        application/json:
          schema:
            description: ""
            type: object
            properties:
              timeConstraints:
                $ref: "#/components/schemas/TimeConstraints"
              groups:
                type: array
                items:
                  type: string
              approval:
                $ref: "#/components/schemas/ApproverConfig"
              name:
                type: string
              description:
                type: string
              updateMessage:
                type: string
            required:
              - timeConstraints
              - groups
              - approval
              - name
              - description
          examples: {}
    CreateAccessRuleRequest:
      content:
        application/json:
          schema:
            description: ""
            type: object
            properties:
              groups:
                description: The group IDs that the access rule applies to.
                type: array
                items:
                  type: string
              approval:
                $ref: "#/components/schemas/ApproverConfig"
              name:
                type: string
                example: Okta admin
              description:
                type: string
                example: Admin access to Okta
              target:
                $ref: "#/components/schemas/CreateAccessRuleTarget"
              timeConstraints:
                $ref: "#/components/schemas/TimeConstraints"
            required:
              - groups
              - approval
              - name
              - description
              - target
              - timeConstraints
    CreateUserRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
              isAdmin:
                type: boolean
            required:
              - email
              - name
              - isAdmin
      description: ""
    CreateRequestRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              accessRuleId:
                type: string
              reason:
                type: string
              timing:
                $ref: "#/components/schemas/RequestTiming"
              with:
                $ref: "#/components/schemas/CreateRequestWith"
            required:
              - accessRuleId
              - timing
    ReviewRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              decision:
                $ref: "#/components/schemas/ReviewDecision"
              comment:
                type: string
              overrideTiming:
                $ref: "#/components/schemas/RequestTiming"
            required:
              - decision
      description: |-
        An approver's review of an Access Request.
        The access request timing can be overriden by including override timing in the request body.
        If it is omitted, the original request timing will be used.
tags:
  - name: End User
  - name: Admin
