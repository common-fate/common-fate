// Package governance provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package governance

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/common-fate/granted-approvals/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []externalRef0.AccessRuleDetail `json:"accessRules"`
	Next        *string                         `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []externalRef0.AccessRule `json:"accessRules"`
	Next        *string                   `json:"next"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    externalRef0.ApproverConfig `json:"approval"`
	Description string                      `json:"description"`

	// The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// A target for an access rule
	Target externalRef0.CreateAccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints externalRef0.TimeConstraints `json:"timeConstraints"`
}

// UpdateAccessRuleRequest defines model for UpdateAccessRuleRequest.
type UpdateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    externalRef0.ApproverConfig `json:"approval"`
	Description string                      `json:"description"`
	Groups      []string                    `json:"groups"`
	Name        string                      `json:"name"`

	// Time configuration for an Access Rule.
	TimeConstraints externalRef0.TimeConstraints `json:"timeConstraints"`
	UpdateMessage   *string                      `json:"updateMessage,omitempty"`
}

// GovListAccessRulesParams defines parameters for GovListAccessRules.
type GovListAccessRulesParams struct {
	// Filter Access Rules by a particular status.
	Status *GovListAccessRulesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// GovListAccessRulesParamsStatus defines parameters for GovListAccessRules.
type GovListAccessRulesParamsStatus string

// GovCreateAccessRuleJSONRequestBody defines body for GovCreateAccessRule for application/json ContentType.
type GovCreateAccessRuleJSONRequestBody externalRef0.CreateAccessRuleRequest

// GovUpdateAccessRuleJSONRequestBody defines body for GovUpdateAccessRule for application/json ContentType.
type GovUpdateAccessRuleJSONRequestBody externalRef0.UpdateAccessRuleRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GovListAccessRules request
	GovListAccessRules(ctx context.Context, params *GovListAccessRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GovCreateAccessRule request with any body
	GovCreateAccessRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GovCreateAccessRule(ctx context.Context, body GovCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GovGetAccessRule request
	GovGetAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GovUpdateAccessRule request with any body
	GovUpdateAccessRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GovUpdateAccessRule(ctx context.Context, ruleId string, body GovUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GovArchiveAccessRule request
	GovArchiveAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GovListAccessRules(ctx context.Context, params *GovListAccessRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovListAccessRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovCreateAccessRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovCreateAccessRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovCreateAccessRule(ctx context.Context, body GovCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovCreateAccessRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovGetAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovGetAccessRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovUpdateAccessRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovUpdateAccessRuleRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovUpdateAccessRule(ctx context.Context, ruleId string, body GovUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovUpdateAccessRuleRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GovArchiveAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGovArchiveAccessRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGovListAccessRulesRequest generates requests for GovListAccessRules
func NewGovListAccessRulesRequest(server string, params *GovListAccessRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/gov/access-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGovCreateAccessRuleRequest calls the generic GovCreateAccessRule builder with application/json body
func NewGovCreateAccessRuleRequest(server string, body GovCreateAccessRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGovCreateAccessRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewGovCreateAccessRuleRequestWithBody generates requests for GovCreateAccessRule with any type of body
func NewGovCreateAccessRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/gov/access-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGovGetAccessRuleRequest generates requests for GovGetAccessRule
func NewGovGetAccessRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/gov/access-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGovUpdateAccessRuleRequest calls the generic GovUpdateAccessRule builder with application/json body
func NewGovUpdateAccessRuleRequest(server string, ruleId string, body GovUpdateAccessRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGovUpdateAccessRuleRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewGovUpdateAccessRuleRequestWithBody generates requests for GovUpdateAccessRule with any type of body
func NewGovUpdateAccessRuleRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/gov/access-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGovArchiveAccessRuleRequest generates requests for GovArchiveAccessRule
func NewGovArchiveAccessRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/gov/access-rules/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GovListAccessRules request
	GovListAccessRulesWithResponse(ctx context.Context, params *GovListAccessRulesParams, reqEditors ...RequestEditorFn) (*GovListAccessRulesResponse, error)

	// GovCreateAccessRule request with any body
	GovCreateAccessRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GovCreateAccessRuleResponse, error)

	GovCreateAccessRuleWithResponse(ctx context.Context, body GovCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*GovCreateAccessRuleResponse, error)

	// GovGetAccessRule request
	GovGetAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GovGetAccessRuleResponse, error)

	// GovUpdateAccessRule request with any body
	GovUpdateAccessRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GovUpdateAccessRuleResponse, error)

	GovUpdateAccessRuleWithResponse(ctx context.Context, ruleId string, body GovUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*GovUpdateAccessRuleResponse, error)

	// GovArchiveAccessRule request
	GovArchiveAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GovArchiveAccessRuleResponse, error)
}

type GovListAccessRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessRules []externalRef0.AccessRuleDetail `json:"accessRules"`
		Next        *string                         `json:"next"`
	}
}

// Status returns HTTPResponse.Status
func (r GovListAccessRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GovListAccessRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GovCreateAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.AccessRuleDetail
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GovCreateAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GovCreateAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GovGetAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.AccessRuleDetail
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GovGetAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GovGetAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GovUpdateAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.AccessRuleDetail
}

// Status returns HTTPResponse.Status
func (r GovUpdateAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GovUpdateAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GovArchiveAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.AccessRuleDetail
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GovArchiveAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GovArchiveAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GovListAccessRulesWithResponse request returning *GovListAccessRulesResponse
func (c *ClientWithResponses) GovListAccessRulesWithResponse(ctx context.Context, params *GovListAccessRulesParams, reqEditors ...RequestEditorFn) (*GovListAccessRulesResponse, error) {
	rsp, err := c.GovListAccessRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovListAccessRulesResponse(rsp)
}

// GovCreateAccessRuleWithBodyWithResponse request with arbitrary body returning *GovCreateAccessRuleResponse
func (c *ClientWithResponses) GovCreateAccessRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GovCreateAccessRuleResponse, error) {
	rsp, err := c.GovCreateAccessRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovCreateAccessRuleResponse(rsp)
}

func (c *ClientWithResponses) GovCreateAccessRuleWithResponse(ctx context.Context, body GovCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*GovCreateAccessRuleResponse, error) {
	rsp, err := c.GovCreateAccessRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovCreateAccessRuleResponse(rsp)
}

// GovGetAccessRuleWithResponse request returning *GovGetAccessRuleResponse
func (c *ClientWithResponses) GovGetAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GovGetAccessRuleResponse, error) {
	rsp, err := c.GovGetAccessRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovGetAccessRuleResponse(rsp)
}

// GovUpdateAccessRuleWithBodyWithResponse request with arbitrary body returning *GovUpdateAccessRuleResponse
func (c *ClientWithResponses) GovUpdateAccessRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GovUpdateAccessRuleResponse, error) {
	rsp, err := c.GovUpdateAccessRuleWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovUpdateAccessRuleResponse(rsp)
}

func (c *ClientWithResponses) GovUpdateAccessRuleWithResponse(ctx context.Context, ruleId string, body GovUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*GovUpdateAccessRuleResponse, error) {
	rsp, err := c.GovUpdateAccessRule(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovUpdateAccessRuleResponse(rsp)
}

// GovArchiveAccessRuleWithResponse request returning *GovArchiveAccessRuleResponse
func (c *ClientWithResponses) GovArchiveAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GovArchiveAccessRuleResponse, error) {
	rsp, err := c.GovArchiveAccessRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGovArchiveAccessRuleResponse(rsp)
}

// ParseGovListAccessRulesResponse parses an HTTP response from a GovListAccessRulesWithResponse call
func ParseGovListAccessRulesResponse(rsp *http.Response) (*GovListAccessRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GovListAccessRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessRules []externalRef0.AccessRuleDetail `json:"accessRules"`
			Next        *string                         `json:"next"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGovCreateAccessRuleResponse parses an HTTP response from a GovCreateAccessRuleWithResponse call
func ParseGovCreateAccessRuleResponse(rsp *http.Response) (*GovCreateAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GovCreateAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.AccessRuleDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGovGetAccessRuleResponse parses an HTTP response from a GovGetAccessRuleWithResponse call
func ParseGovGetAccessRuleResponse(rsp *http.Response) (*GovGetAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GovGetAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessRuleDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGovUpdateAccessRuleResponse parses an HTTP response from a GovUpdateAccessRuleWithResponse call
func ParseGovUpdateAccessRuleResponse(rsp *http.Response) (*GovUpdateAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GovUpdateAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessRuleDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGovArchiveAccessRuleResponse parses an HTTP response from a GovArchiveAccessRuleWithResponse call
func ParseGovArchiveAccessRuleResponse(rsp *http.Response) (*GovArchiveAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GovArchiveAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessRuleDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/gov/access-rules)
	GovListAccessRules(w http.ResponseWriter, r *http.Request, params GovListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/gov/access-rules)
	GovCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/gov/access-rules/{ruleId})
	GovGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/gov/access-rules/{ruleId})
	GovUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Archive Access Rule
	// (POST /api/v1/gov/access-rules/{ruleId}/archive)
	GovArchiveAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GovListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) GovListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GovListAccessRulesParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GovListAccessRules(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GovCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) GovCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GovCreateAccessRule(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GovGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) GovGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GovGetAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GovUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) GovUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GovUpdateAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GovArchiveAccessRule operation middleware
func (siw *ServerInterfaceWrapper) GovArchiveAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GovArchiveAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/gov/access-rules", wrapper.GovListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/gov/access-rules", wrapper.GovCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/gov/access-rules/{ruleId}", wrapper.GovGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/gov/access-rules/{ruleId}", wrapper.GovUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/gov/access-rules/{ruleId}/archive", wrapper.GovArchiveAccessRule)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/bNhf9Kxf8vkdNcrYW6PzmumlmbF2HLOtLl4cb6dpmQ5HsJeXWC/TfB1JyLMlK",
	"6iAZ2gF7ikOR5x7ec3RI3YjclNZo0t6J6Y1g+liR8y9NISkOzJnQ0yzPybnzStF5MyE8yo32pONPtFbJ",
	"HL00OvvgjA5jLl9TieGXZWOJfYuI1rLZoAq//8+0FFORppmxpNHKdFuq/2V7TlmD4rJZXEU8N3opV6JO",
	"REEuZ2lDzQBFn7G0isRUzIpSasBIGbyBt9ceRSL81oanzrPUEWDFprKRUg9KXKwJ4jNYvHLg1+jBr2kH",
	"yJUiiPulgJ6KREhPZcQ5KNEOIDNuw/8aS+qTDeQAA+Mxih55Rf5hnRoqdtFgBDRZ0txo5xllq/fxsBeD",
	"xXWdRLdIpkJM3++6mez1bbfbV+p2T4d0Lm8bYK4+UO5FXYcif9ji3+HAewz2cIccTnxS8RJRxba+Iedw",
	"NVZxIO+wfHKs4KOqRnBnjXaNIqfMhs/bkUcoSwHny5tppo0xG4gqZhriZGDyFWsqYMmmjHngiDcypzQ0",
	"8xfp/N6h7hV5lOoJ9oN7zJ6NHuDaW4SG1Kjn6HNkpiul8CrEkueKki80scutxTimo6dN9MFO/5H2fWON",
	"++otm4GSzoNZQkMKIkLaTJV6aXaNwrwhFTNEzE1ZGg2v0Yd3smIlpmLtvXXTLGy4NHqJnlJpxJjtZ78t",
	"YGkYLJsVY1milzkqtYUSNa6kXnUPRAdSwxmj9lTArM0Dl8aQ982hvBuEsxCiGnVOoYZIxIbYNWVP0kng",
	"0kojpuKHdJJORCIs+nXUL0Mrs81JtjKbrKn/He9Ebk/K/k6CtQCV6rEVsQZHKy0KMRVnZjPwYCzKWJIn",
	"dmL6foj7WipP3BMErraAYJG9zCuFDM6jr2IXZFjysSLe7kIyeCQ8FUnHw6SrMvhkNr9YvDsViZidz39a",
	"vDt91bHJ3lpDSqRz3tqggDfXpCE6QuoglQ2Kxe1C9Ms4o2DIi7C0R2pY93KQ3d9PJp03q/cu3c7L7g/I",
	"4GNXlSXydidZt7Hx0rAKKoi9ecRlnQhr3IjmzQ0IUHdFH9N8eFUSSecCvD0uL3o35uyu63J90LSTB6Xb",
	"YwL/MFAalkVg9ayn3r373GnZP6wjxskjMXr6t/J1HHCXAerkzkDIbsKfRVHfmQxn5INFOmXSMY+ckR8Y",
	"5ND7X0nGtz8/TfcDxrOnVDC09gj5DiI2hlLI+n0mNSqK7jnanLT3BpStRgRvPiTcUHSI4/FAaz7u8ug/",
	"BwiaPkF7Oo16Y/hp8vj8uOtjp/4mjTc5bPJLLKBDujXnQAiNlV8bln/tMujZ4aRfjYfXptJxxvOxUgvt",
	"g5cU/E68IYboyIETm34+VZZkyPlabuLF9B+z7uiR9gb52g1ONEAHLaEi/VPP9BYs6SI4uTWVizc4v5au",
	"t+6TVAquCPKwdaWoGDX3rIH+L/yOwXj+6GO0Z9u290f5NiyML0BjxP09f5plyuSo1sb56YsXL34UwV8t",
	"yO1XQgesvqz/DgAA//8nKPI9EBQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
