name: Preview

on:
  pull_request:

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
          cache: true

      - name: Install NodeJS dependencies
        run: pnpm install

      - name: Create empty aws-exports.js
        run: echo 'export default {};' > ./web/src/utils/aws-exports.js

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: "${{ secrets.AWS_TESTING_ROLE_ARN }}"

      - name: Release CloudFormation
        run: go run mage.go -v release:production granted-test-releases-us-west-2 dev/${{ github.sha }}
        env:
          COMMONFATE_RELEASE: dev-${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    concurrency: deploy-preview

    outputs:
      vaultID: ${{ steps.deploy_preview.outputs.vaultID}}

    permissions:
      id-token: write
      contents: write
      deployments: write

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: common-fate/branch-name@v1.1.2
        name: Get branch name
        id: branch
        with:
          max-length: 32

      - uses: chrnorm/deployment-action@v2.0.2
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: https://${{ steps.branch.outputs.name }}.test.granted.run
          environment: ${{ steps.branch.outputs.name }}
          transient-environment: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
          cache: true

      - name: Install NodeJS dependencies
        run: pnpm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: "${{ secrets.AWS_TESTING_ROLE_ARN }}"

      - name: Create empty aws-exports.js
        run: echo 'export default {};' > ./web/src/utils/aws-exports.js

      - name: Deploy preview environment
        id: "deploy_preview"
        run: go run mage.go -v deploy:staging test ${{ steps.branch.outputs.name }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          USE_SENTRY: true

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2.0.0
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          state: "success"
          auto-inactive: true
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2.0.0
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
  playwright-tests:
    needs: [deploy]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: common-fate/branch-name@v1.1.2
        name: Get branch name
        id: branch
        with:
          max-length: 32
      - uses: actions/checkout@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"
      - name: Cache playwright binaries
        uses: actions/cache@v2
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: cache-playwright
      - name: Install Deps
        run: pnpm i
        working-directory: web
      - name: Install Playwright
        # if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm run e2e-install
        working-directory: web
      - name: Run Playwright tests
        run: pnpm run e2e:ci
        working-directory: web
        env:
          TESTING_DOMAIN: "https://${{ steps.branch.outputs.name }}.test.granted.run"
          TEST_USERNAME: "${{ secrets.TEST_USERNAME}}"
          TEST_ADMIN_USERNAME: "${{ secrets.TEST_ADMIN_USERNAME}}"
          TEST_PASSWORD: "${{ secrets.TEST_PASSWORD}}"
          USER_POOL_ID: "${{ secrets.USER_POOL_ID}}"
          COGNITO_CLIENT_ID: "${{ secrets.COGNITO_CLIENT_ID}}"
          VAULT_ID: "${{ needs.deploy.outputs.vaultID }}"
          CI: true
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-traces
          path: web/test-results/
