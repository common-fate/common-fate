name: CI

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
          cache: true
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: pnpm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: "${{ secrets.AWS_TESTING_ROLE_ARN }}"

      - name: Provision test DynamoDB database
        run: |
          echo > .env
          go run cmd/devcli/main.go db create -n approvals-test-$GITHUB_REF_NAME --wait

      - name: Build Dev Server
        run: go build cmd/server/main.go

      - name: Build Deployable Lambda
        run: go build cmd/lambda/approvals/handler.go

      - name: Lint
        run: go vet ./...
      # There is an issue in the test pkg/deploy.output_test.go which doesn't run this command correctly so it is added here to ensure the test works
      - name: generate test json
        run: cd deploy/infra && pnpm ts-node ./test/stack-outputs.ts

      - name: Test
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic

  golangci:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19.0
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.49.0
          args: --timeout=3m

  test-frontend:
    name: Test NodeJS
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: pnpm install

      - name: Create empty aws-exports.js
        run: echo 'export default {};' > ./web/src/utils/aws-exports.js

      - name: Run ESLint
        run: pnpm run lint:ci
        working-directory: web

      - name: Run Tests
        run: pnpm run -r test

      - name: Build
        run: pnpm run build
        working-directory: web

  playwright-component-tests:
    name: Playwright React Component Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Cache playwright binaries
        uses: actions/cache@v2
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: cache-playwright

      - name: Install Deps
        run: pnpm i
        working-directory: web

      - name: Install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm run e2e-install
        working-directory: web

      - name: Run Component Tests
        run: pnpm test-ct
        working-directory: web

  test-accesshandler:
    name: Test Access Handler
    runs-on: ubuntu-latest
    env:
      GRANTED_INTEGRATION_TEST: true
      PROVIDER_CONFIG: '{"okta":{"uses": "commonfate/okta@v1", "with": {"orgUrl":"${{ secrets.OKTA_ORG_URL }}","apiToken":"${{ secrets.OKTA_API_TOKEN }}"}}}'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
          cache: true
      - name: generate fixtures
        run: go run accesshandler/cmd/gdk/main.go fixtures create --name okta --path accesshandler/fixtures
      - name: test okta
        run: go test ./accesshandler/pkg/providers/okta
      - name: destroy fixtures
        if: always() #always destroy the fixture even if the test fails
        run: go run accesshandler/cmd/gdk/main.go fixtures destroy --name okta --path accesshandler/fixtures
  test-identity-provider:
    permissions:
      id-token: write
      contents: read
    name: Test Identity Provider
    runs-on: ubuntu-latest
    env:
      GRANTED_INTEGRATION_TEST: true
      IDENTITY_SETTINGS: "${{ secrets.IDENTITY_SETTINGS }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
          cache: true
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-southeast-2
          role-to-assume: "${{ secrets.AWS_SANDBOX_INTEGRATION_TESTING_ROLE_ARN }}"
      - name: test idp
        run: go test ./pkg/identity/identitysync
