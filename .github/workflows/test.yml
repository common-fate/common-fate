name: CI

on: [push]

jobs:
  test:
    if: ${{ false }}
    name: Test
    runs-on: ubuntu-20.04

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17.8'
          cache: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: '${{ secrets.AWS_TESTING_ROLE_ARN }}'

      - name: Provision test DynamoDB database
        run: |
          echo > .env
          go run cmd/devcli/main.go db create -n approvals-test-$GITHUB_REF_NAME --wait

      - name: Build Dev Server
        run: go build cmd/server/main.go

      - name: Build Deployable Lambda
        run: go build cmd/lambda/approvals/handler.go

      - name: Lint
        run: go vet ./...

      - name: Test
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic

  golangci:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17.8
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.29
          args: --timeout=3m

  test-frontend:
    name: Test NodeJS
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'pnpm'

      - name: Install NodeJS dependencies
        run: pnpm install

      - name: Create empty aws-exports.js
        run: echo 'export default {};' > ./web/src/utils/aws-exports.js

      - name: Run ESLint
        run: pnpm run lint:ci
        working-directory: web

      - name: Run Tests
        run: pnpm run -r test

      - name: Build
        run: pnpm run build
        working-directory: web
      # - name: Install Playwright
      #   run: pnpm run e2e-install
      #   working-directory: web
      # - name: Run Playwright tests
      #   run: pnpm run e2e
      #   working-directory: web
      #   env:
      #     # This might depend on your test-runner/language binding
      #     PLAYWRIGHT_TEST_BASE_URL: djmoxvh6xpra8.cloudfront.net/
  playwright-tests:
    # needs: [test-frontend]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    # if: github.event.deployment_status.state == 'success'
    steps:
      - uses: actions/checkout@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.1.5
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          # cache: 'pnpm'
      # Should be installed from dependent test-frontend
      # - name: Install dependencies
      #   run: pnpm ci
      #   working-directory: web
      - name: Install Deps
        run: pnpm i
        working-directory: web
      - name: Install Playwright
        run: pnpm run e2e-install
        working-directory: web
      - name: Run Playwright tests
        run: pnpm run e2e
        working-directory: web
        env:
          # This might depend on your test-runner/language binding
          PLAYWRIGHT_TEST_BASE_URL: djmoxvh6xpra8.cloudfront.net/
          TEST_USERNAME: '${{ secrets.TEST_USERNAME}}'
          TEST_ADMIN_USERNAME: '${{ secrets.TEST_ADMIN_USERNAME}}'
          TEST_PASSWORD: '${{ secrets.TEST_PASSWORD}}'
          USER_POOL_ID: '${{ secrets.USER_POOL_ID}}'
          COGNITO_CLIENT_ID: '${{ secrets.COGNITO_CLIENT_ID}}'
          TESTING_DOMAIN: '${{ secrets.TESTING_DOMAIN}}'
